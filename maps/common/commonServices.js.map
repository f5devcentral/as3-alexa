{"version":3,"sources":["common/commonServices.js"],"names":["angular","module","factory","ModalService","ValidationService","FilterService","HealthService","constant","REGEXIP","REGEXPORT","$uibModal","open","size","template","controller","controllerAs","params","animation","templateUrl","resolve","uiGridValidateService","CONSTANTS","validation","setValidator","argument","oldValue","newValue","rowEntity","colDef","test","isPortValid","fs","filter","rows","filterValue","arr","matcher","RegExp","forEach","row","match","field","entity","value","toString","visible","$resource","health","resource","ping","url","type","ip","method","cancellable"],"mappings":"AAAA;;;;;;;;;;;yCAMC,CAAA,YAAY;EACXA,QAAQC,OAAO,kBAAkB,IAC/BC,QAAQ,gBAAgBC,cACxBD,QAAQ,qBAAqBE,mBAC7BF,QAAQ,iBAAiBG,eACzBH,QAAQ,iBAAiBI;;EAEzBC,SAAS,aAAa;IACpBC,SAAS;IACTC,WAAW;;;EAGf,SAASN,aAAcO,WAAW;IAChC,OAAO;MACLC,MAAM,SAAA,KAAUC,MAAMC,UAAUC,YAAYC,cAAcC,SAAQ;QAChE,OAAON,UAAUC,KAAK;UACpBM,WAAW;UACXC,aAAaL;UACbC,YAAYA;UACZC,cAAcA;UACdH,MAAMA;UACNO,SAAS;YACPH,QAAQ,SAAA,SAAY;cAClB,OAAOA;;;;;;;;EAQnB,SAASZ,kBAAmBgB,uBAAuBC,WAAW;IAC5D,IAAMC,aAAa;;;IAGnBF,sBAAsBG,aAAa,aACjC,UAAUC,UAAU;;MAElB,OAAO,UAAUC,UAAUC,UAAUC,WAAWC,QAAQ;QACtD,IAAI,CAACF,UAAU;UACb,OAAO;;QAET,OAAOL,UAAUb,QAAQqB,KAAKH;;;OAKlC,UAAUF,UAAU;MAClB,OAAA,+CAAoDA,WAApD;;;;IAKJF,WAAWQ,cAAcV,sBAAsBG,aAAa,WAC1D,UAAUC,UAAU;;MAElB,OAAO,UAAUC,UAAUC,UAAUC,WAAWC,QAAQ;QACtD,IAAI,CAACF,UAAU;UACb,OAAO;;QAET,OAAOL,UAAUZ,UAAUoB,KAAKH;;OAIpC,UAAUF,UAAU;MAClB,OAAA,gDAAqDA,WAArD;;;IAIJ,OAAOF;;;EAIT,SAASjB,gBAAiB;IACxB,IAAM0B,KAAK;;IAEXA,GAAGC,SAAS,UAAUC,MAAMC,aAAaC,KAAK;MAC5C,IAAMC,UAAU,IAAIC,OAAOH;MAC3BD,KAAKK,QAAQ,UAAUC,KAAK;QAC1B,IAAIC,QAAQ;QACZL,IAAIG,QAAQ,UAAUG,OAAO;;UAE3B,IAAIF,IAAIG,OAAOD,QAAQ;YACrB,IAAME,QAAQJ,IAAIG,OAAOD,OAAOG;YAChC,IAAID,MAAMH,MAAMJ,UAAU;cACxBI,QAAQ;;;;QAId,IAAI,CAACA,OAAO;UACVD,IAAIM,UAAU;;;MAGlB,OAAOZ;;IAET,OAAOF;;;EAGT,SAASzB,cAAewC,WAAW;;IAEjC,IAAMC,SAAS;;IAEfA,OAAOC,WAAWF,UAAU,6BAA6B,IAAI;MAC3DG,MAAM;QACJC,KAAK;QACLlC,QAAQ;UACNmC,MAAM;UACNC,IAAI;;QAENC,QAAQ;QACRC,aAAa;;;;IAIjB,OAAOP;;KAlHX","file":"../../components/common/commonServices.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n  angular.module('commonServices', []).\n    factory('ModalService', ModalService).\n    factory('ValidationService', ValidationService).\n    factory('FilterService', FilterService).\n    factory('HealthService', HealthService).\n  // CONSTANTS\n    constant('CONSTANTS', {\n      REGEXIP: /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n      REGEXPORT: /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/\n    });\n\n  function ModalService ($uibModal) {\n    return {\n      open: function (size, template, controller, controllerAs, params) {\n        return $uibModal.open({\n          animation: true,\n          templateUrl: template,\n          controller: controller,\n          controllerAs: controllerAs,\n          size: size,\n          resolve: {\n            params: function () {\n              return params;\n            }\n          }\n        });\n      }\n    };\n  }\n\n  function ValidationService (uiGridValidateService, CONSTANTS) {\n    const validation = {};\n\n    /** Validation Service for IP Address - Alpha (might not be stable!!)  **/\n    uiGridValidateService.setValidator('ipAddress',\n      function (argument) {\n        // UI-Grid Validation Service - example code has newValue and oldValue reversed!\n        return function (oldValue, newValue, rowEntity, colDef) {\n          if (!newValue) {\n            return true; // We should not test for existence here\n          }\n          return CONSTANTS.REGEXIP.test(newValue);\n          // return newValue.startsWith(argument);\n\n        };\n      },\n      function (argument) {\n        return `Please enter a valid ip address of format ${argument} with each number ranging from 0 to 255`;\n      }\n    );\n\n    /** Validation Service for Port - Alpha (might not be stable!!)  **/\n    validation.isPortValid = uiGridValidateService.setValidator('portNum',\n      function (argument) {\n        // UI-Grid Validation Service - example code has newValue and oldValue reversed!\n        return function (oldValue, newValue, rowEntity, colDef) {\n          if (!newValue) {\n            return true; // We should not test for existence here\n          }\n          return CONSTANTS.REGEXPORT.test(newValue);\n\n        };\n      },\n      function (argument) {\n        return `Please enter a valid port number of format ${argument} ranging from 0 to 65535`;\n      }\n    );\n\n    return validation;\n\n  }\n\n  function FilterService () {\n    const fs = {};\n    // Note: Unable to filter according to a number\n    fs.filter = function (rows, filterValue, arr) {\n      const matcher = new RegExp(filterValue);\n      rows.forEach(function (row) {\n        let match = false;\n        arr.forEach(function (field) {\n          // [ 'name', 'email', 'body' ].forEach(function( field ){\n          if (row.entity[field]) {\n            const value = row.entity[field].toString();\n            if (value.match(matcher)) {\n              match = true;\n            }\n          }\n        });\n        if (!match) {\n          row.visible = false;\n        }\n      });\n      return rows;\n    };\n    return fs;\n  }\n\n  function HealthService ($resource) {\n\n    const health = {};\n\n    health.resource = $resource('proxy/v1/health/:type/:ip', {}, {\n      ping: {\n        url: 'proxy/v1/health/:type/:ip',\n        params: {\n          type: '@type',\n          ip: '@ip'\n        },\n        method: 'GET',\n        cancellable: true\n      }\n    });\n\n    return health;\n\n  }\n}());\n"]}