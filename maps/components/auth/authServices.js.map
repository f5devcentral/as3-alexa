{"version":3,"sources":["components/auth/authServices.js"],"names":["angular","module","factory","AuthService","UserService","$http","$resource","$cookieStore","$rootScope","auth","isLogged","login","username","password","save","method","headers","Authorization","window","btoa","SetCredentials","authdata","globals","currentUser","logged","defaults","common","put","ClearCredentials","remove","getLogged","get","user","resource","update"],"mappings":"AAAA;;;;;;;;;;gDAMC,CAAA,YAAY;EACXA,QAAQC,OAAO,gBAAgB,IAC7BC,QAAQ,eAAeC,aACvBD,QAAQ,eAAeE;;EAEzB,SAASD,YAAaE,OAAOC,WAAWC,cAAcC,YAAY;;IAEhE,IAAMC,OAAO;IACbA,KAAKC,WAAW;;IAGhBD,KAAKE,QAAQ,UAAUC,UAAUC,UAAU;MACzC,OAAOP,UAAU,WAAW,IAAI;QAC9BQ,MAAM;UACJC,QAAQ;UACRC,SAAS,EAACC,eAAAA,WAAwBC,OAAOC,KAAQP,WAAf,MAA2BC;;;;;IAKnEJ,KAAKW,iBAAiB,UAAUR,UAAUC,UAAU;MAClD,IAAMQ,WAAWH,OAAOC,KAAQP,WAAf,MAA2BC;;MAE5CL,WAAWc,UAAU;QACnBC,aAAa;UACXF,UAAUA;UACVG,QAAQ;;;MAGZnB,MAAMoB,SAAST,QAAQU,OAAOT,gBAA9B,WAAuDI;MACvDd,aAAaoB,IAAI,WAAWnB,WAAWc;;;IAIzCb,KAAKmB,mBAAmB,YAAY;MAClCpB,WAAWc,UAAU;MACrBf,aAAasB,OAAO;MACpBxB,MAAMoB,SAAST,QAAQU,OAAOT,gBAAgB;;;IAGhDR,KAAKqB,YAAY,YAAY;MAC3B,IAAIvB,aAAawB,IAAI,YAAY;QAC/B,OAAOxB,aAAawB,IAAI,WAAWR,YAAYC;;MAEjD,OAAO;;;IAKT,OAAOf;;;EAIT,SAASL,YAAaC,OAAOC,WAAW;IACtC,IAAM0B,OAAO;;IAEbA,KAAKC,WAAW3B,UAAU,yBAAyB,IAAI;MACrDyB,KAAK,EAAChB,QAAQ;MACdmB,QAAQ,EAACnB,QAAQ;;;IAGnB,OAAOiB;;KA7DX","file":"../../../src/components/auth/authServices.js","sourcesContent":["/*\n * Copyright (c) 2015, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n  angular.module('authServices', []).\n    factory('AuthService', AuthService).\n    factory('UserService', UserService);\n\n  function AuthService ($http, $resource, $cookieStore, $rootScope) {\n\n    const auth = {};\n    auth.isLogged = false;\n\n\n    auth.login = function (username, password) {\n      return $resource('/login/', {}, {\n        save: {\n          method: 'POST',\n          headers: {Authorization: `Basic ${window.btoa(`${username}:${password}`)}`}\n        }\n      });\n    };\n\n    auth.SetCredentials = function (username, password) {\n      const authdata = window.btoa(`${username}:${password}`);\n\n      $rootScope.globals = {\n        currentUser: {\n          authdata: authdata,\n          logged: true\n        }\n      };\n      $http.defaults.headers.common.Authorization = `Basic ${authdata}`;\n      $cookieStore.put('globals', $rootScope.globals);\n    };\n\n\n    auth.ClearCredentials = function () {\n      $rootScope.globals = {};\n      $cookieStore.remove('globals');\n      $http.defaults.headers.common.Authorization = 'Basic ';\n    };\n\n    auth.getLogged = function () {\n      if ($cookieStore.get('globals')) {\n        return $cookieStore.get('globals').currentUser.logged;\n      }\n      return false;\n\n\n    };\n\n    return auth;\n\n  }\n\n  function UserService ($http, $resource) {\n    const user = {};\n\n    user.resource = $resource('proxy/v1/credentials/', {}, {\n      get: {method: 'GET'},\n      update: {method: 'PATCH'}\n    });\n\n    return user;\n  }\n}());\n"]}