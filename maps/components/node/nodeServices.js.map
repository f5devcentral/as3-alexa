{"version":3,"sources":["components/node/nodeServices.js"],"names":["angular","module","factory","NodeFactory","DNodeService","$resource","node","data","nodeResource","query","method","isArray","cancellable","timeout","get","save","update","url","params","vpc","id","delete","filter","rows","filterValue","arr","matcher","RegExp","forEach","row","match","field","entity","visible","addRow","obj","unshift","deleteRow","index","indexOf","splice","setList","list","nodes","getList","dnode","isAuth","isPolling","resource","config","vendor","getAuth","setAuth","val","setPolling","getPolling"],"mappings":"AAAA;;;;;;;;AAMC,CAAA,YAAY;;;;EAEXA,QAAQC,OAAO,gBAAgB,IAC7BC,QAAQ,eAAeC,aACvBD,QAAQ,gBAAgBE;;EAG1B,SAASD,YAAaE,WAAW;;IAE/B,IAAMC,OAAO;IACbA,KAAKC,OAAO;;IAEZD,KAAKE,eAAeH,UAAU,mBAAmB,IAAI;MACnDI,OAAO;QACLC,QAAQ;QACRC,SAAS;QACTC,aAAa;QACbC,SAAS;;MAEXC,KAAK;QACHJ,QAAQ;QACRE,aAAa;QACbC,SAAS;;MAEXE,MAAM,EAACL,QAAQ;MACfM,QAAQ;QACNC,KAAK;QACLC,QAAQ;UACNC,KAAK;UACLC,IAAI;;QAENV,QAAQ;QACRC,SAAS;;MAEXU,QAAQ;QACNJ,KAAK;QACLC,QAAQ;UACNC,KAAK;UACLC,IAAI;;QAENV,QAAQ;;;;;;IAMZJ,KAAKgB,SAAS,UAAUC,MAAMC,aAAaC,KAAK;MAC9C,IAAMC,UAAU,IAAIC,OAAOH;MAC3BD,KAAKK,QAAQ,UAAUC,KAAK;QAC1B,IAAIC,QAAQ;QACZL,IAAIG,QAAQ,UAAUG,OAAO;;;UAG3B,IAAIF,IAAIG,OAAOD,UAAUF,IAAIG,OAAOD,OAAOD,MAAMJ,UAAU;YACzDI,QAAQ;;;QAGZ,IAAI,CAACA,OAAO;UACVD,IAAII,UAAU;;;MAGlB,OAAOV;;;IAITjB,KAAK4B,SAAS,UAAC3B,MAAM4B,KAAQ;MAC3B5B,KAAK6B,QAAQD;;;IAGf7B,KAAK+B,YAAY,UAAU9B,MAAMa,IAAI;MACnC,IAAMkB,QAAQ/B,KAAKgC,QAAQnB;MAC3B,IAAIkB,QAAQ,CAAC,GAAG;QACd/B,KAAKiC,OAAOF,OAAO;QACnBhC,KAAKC,OAAOA;;;;IAIhBD,KAAKmC,UAAU,UAAUlC,MAAM;MAC7BD,KAAKoC,OAAOnC,KAAKoC;;IAEnBrC,KAAKsC,UAAU,YAAY;MACzB,OAAOtC,KAAKoC;;;IAGd,OAAOpC;;;EAIT,SAASF,aAAcC,WAAW;;IAEhC,IAAMwC,QAAQ;IACdA,MAAMtC,OAAO;IACbsC,MAAMC,SAAS;IACfD,MAAME,YAAY;;IAElBF,MAAMG,WAAW3C,UAAU,6BAA6B,IAAI;MAC1DI,OAAO;QACLC,QAAQ;QACRC,SAAS;QACTC,aAAa;QACbC,SAAS;;MAEXC,KAAK;QACHJ,QAAQ;QACRE,aAAa;QACbC,SAAS;;;;IAIbgC,MAAMI,SAAS5C,UAAU,qBAAqB,IAAI;MAChDS,KAAK;QACHG,KAAK;QACLC,QAAQ,EAACgC,QAAQ;QACjBxC,QAAQ;QACRE,aAAa;QACbC,SAAS;;MAEXE,MAAM;QACJE,KAAK;QACLC,QAAQ,EAACgC,QAAQ;QACjBxC,QAAQ;;MAEVyC,SAAS;QACPlC,KAAK;QACLC,QAAQ,EAACgC,QAAQ;QACjBxC,QAAQ;QACRE,aAAa;QACbC,SAAS;;;;IAIbgC,MAAMO,UAAU,UAAUC,KAAK;MAC7BR,MAAMC,SAASO;;;IAGjBR,MAAMM,UAAU,YAAY;MAC1B,OAAON,MAAMC;;;IAGfD,MAAMS,aAAa,UAAUD,KAAK;MAChCR,MAAME,YAAYM;;;IAGpBR,MAAMU,aAAa,YAAY;MAC7B,OAAOV,MAAME;;;IAGf,OAAOF;;KAnJX","file":"../../../src/components/node/nodeServices.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n\n  angular.module('nodeServices', []).\n    factory('NodeFactory', NodeFactory).\n    factory('DNodeService', DNodeService);\n\n\n  function NodeFactory ($resource) {\n\n    const node = {};\n    node.data = [];\n\n    node.nodeResource = $resource('proxy/v1/nodes/', {}, {\n      query: {\n        method: 'GET',\n        isArray: false,\n        cancellable: true,\n        timeout: 30000\n      },\n      get: {\n        method: 'GET',\n        cancellable: true,\n        timeout: 30000\n      },\n      save: {method: 'POST'},\n      update: {\n        url: 'proxy/v1/nodes/:vpc/:id',\n        params: {\n          vpc: '@vpc',\n          id: '@id'\n        },\n        method: 'PATCH',\n        isArray: false\n      },\n      delete: {\n        url: 'proxy/v1/nodes/:vpc/:id',\n        params: {\n          vpc: '@vpc',\n          id: '@id'\n        },\n        method: 'DELETE'\n\n      }\n    });\n\n    // Note: Unable to filter according to a number\n    node.filter = function (rows, filterValue, arr) {\n      const matcher = new RegExp(filterValue);\n      rows.forEach(function (row) {\n        let match = false;\n        arr.forEach(function (field) {\n          // Using this for dev purpose\n          // [ 'name', 'email', 'body' ].forEach(function( field ){\n          if (row.entity[field] && row.entity[field].match(matcher)) {\n            match = true;\n          }\n        });\n        if (!match) {\n          row.visible = false;\n        }\n      });\n      return rows;\n    };\n\n\n    node.addRow = (data, obj) => {\n      data.unshift(obj);\n    };\n\n    node.deleteRow = function (data, id) {\n      const index = data.indexOf(id);\n      if (index > -1) {\n        data.splice(index, 1);\n        node.data = data;\n      }\n    };\n\n    node.setList = function (data) {\n      node.list = data.nodes;\n    };\n    node.getList = function () {\n      return node.list;\n    };\n\n    return node;\n\n  }\n\n  function DNodeService ($resource) {\n\n    const dnode = {};\n    dnode.data = [];\n    dnode.isAuth = false;\n    dnode.isPolling = true;\n\n    dnode.resource = $resource('proxy/v1/discoveredNodes/', {}, {\n      query: {\n        method: 'GET',\n        isArray: false,\n        cancellable: true,\n        timeout: 30000\n      },\n      get: {\n        method: 'GET',\n        cancellable: true,\n        timeout: 30000\n      }\n    });\n\n    dnode.config = $resource('proxy/v1/vendors/', {}, {\n      get: {\n        url: 'proxy/v1/vendors/:vendor/config',\n        params: {vendor: '@vendor'},\n        method: 'GET',\n        cancellable: true,\n        timeout: 30000\n      },\n      save: {\n        url: 'proxy/v1/vendors/:vendor/config',\n        params: {vendor: '@vendor'},\n        method: 'POST'\n      },\n      getAuth: {\n        url: 'proxy/v1/vendors/:vendor/auth',\n        params: {vendor: '@vendor'},\n        method: 'GET',\n        cancellable: true,\n        timeout: 30000\n      }\n    });\n\n    dnode.setAuth = function (val) {\n      dnode.isAuth = val;\n    };\n\n    dnode.getAuth = function () {\n      return dnode.isAuth;\n    };\n\n    dnode.setPolling = function (val) {\n      dnode.isPolling = val;\n    };\n\n    dnode.getPolling = function () {\n      return dnode.isPolling;\n    };\n\n    return dnode;\n\n  }\n}());\n"]}