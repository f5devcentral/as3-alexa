{"version":3,"sources":["home/homeControllers.js"],"names":["HomeCtrl","$scope","$rootScope","$interval","ProxyService","DNodeService","AuthService","app","stats","nodeDiscovery","message","cloudEnv","vendor","setVendor","getVendor","GraphCtrl","$log","$timeout","$q","uiGridConstants","GraphService","graph","inLimit","updateTimer","tmp","nodes","id","group","status","links","polling","setTimeout","pollData","start","clearTimeout","console","log","stop","graphResource","query","data","angular","equals","latestGraph","newData","copy","updateGraph","err","indexOf","getData","oData","$on","HelpCtrl","$location","AnchorScroll","help","scrollTo","hash","module","controller","$inject"],"mappings":"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","file":"../../components/home/homeControllers.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n\n  /**\nHome Controllers - Base Controllers for Home Page\n**/\n  function HomeCtrl ($scope, $rootScope, $interval, ProxyService, DNodeService, AuthService) {\n    const app = this;\n    app.stats = {};\n    app.nodeDiscovery = false;\n    app.message = '';\n    app.cloudEnv = '';\n    app.vendor = 'private';\n\n    app.setVendor = function (vendor) {\n      app.vendor = vendor;\n    };\n\n    app.getVendor = function () {\n      return app.vendor;\n    };\n\n  }\n\n  function GraphCtrl ($scope, $log, $timeout, $interval, $q, uiGridConstants, GraphService) {\n    const graph = this;\n    graph.inLimit = true;\n    graph.updateTimer;\n\n    const tmp = {\n      nodes: [{\n        id: 'BIG IP',\n        group: 20,\n        status: 'online'\n      }],\n      links: []\n    };\n\n    graph.polling = function () {\n      graph.updateTimer = setTimeout(function () {\n        graph.pollData(graph.polling);\n      }, 3000);\n    };\n\n    graph.start = function () {\n      clearTimeout(graph.updateTimer);\n      graph.polling();\n      console.log('graph start - polling');\n    };\n\n    graph.stop = function () {\n      clearTimeout(graph.updateTimer);\n      console.log('graph stop - polling');\n    };\n\n    graph.pollData = function (polling) {\n        GraphService.graphResource.query((data) => {\n          if (data[0]) {\n            if (angular.equals(data[0], graph.latestGraph())) {\n              graph.inLimit = true;\n            } else {\n              const newData = angular.copy(data[0]);\n              graph.updateGraph(newData);\n              graph.data = data[0];\n              graph.inLimit = true;\n            }\n            polling();\n          } else {\n            graph.updateGraph(tmp);\n            graph.data = tmp;\n            graph.inLimit = false;\n            polling();\n          }\n        }, (err) => {\n          console.log(err);\n          graph.updateGraph(tmp);\n          graph.data = tmp;\n          if (err.status === 403 && err.data.message && err.data.message.indexOf('Dataset is too large')) {\n            graph.inLimit = false;\n          } else {\n            graph.inLimit = true;\n          }\n          polling();\n        });\n    };\n\n\n    graph.getData = function () {\n        GraphService.graphResource.query((data) => {\n          console.log('data ================ ');\n          console.log(data[0]);\n          if (data[0]) {\n            if (angular.equals(data[0], graph.latestGraph())) {\n              graph.inLimit = true;\n            } else {\n              const newData = angular.copy(data[0]);\n              graph.updateGraph(newData);\n              graph.data = data[0];\n              graph.inLimit = true;\n            }\n          } else {\n            graph.updateGraph(tmp);\n            graph.data = tmp;\n            graph.inLimit = false;\n          }\n\n        }, (err) => {\n          console.log(err);\n          graph.updateGraph(tmp);\n          graph.data = tmp;\n          if (err.status === 403 && err.data.message && err.data.message.indexOf('Dataset is too large')) {\n            graph.inLimit = false;\n          } else {\n            graph.inLimit = true;\n          }\n        });\n    }\n\n    graph.updateGraph = function (data) {\n      graph.oData = data;\n    };\n\n    graph.latestGraph = function () {\n      return graph.oData;\n    };\n\n    $scope.$on('$destroy', function () {\n      graph.stop();\n    });\n\n    graph.getData();\n    //graph.start();\n\n  }\n\n\n  function HelpCtrl ($scope, $location, AnchorScroll) {\n    const help = this;\n    help.scrollTo = function (id) {\n      $location.hash('id');\n      AnchorScroll.scrollTo(id);\n    };\n  }\n\n\n  angular.module('homeControllers', []).\n    controller('HomeCtrl', HomeCtrl).\n    controller('GraphCtrl', GraphCtrl).\n    controller('HelpCtrl', HelpCtrl);\n\n  /** Inject the dependencies - avoid problems during minification **/\n  HomeCtrl.$inject = ['$scope', '$rootScope', '$interval', 'ProxyService', 'DNodeService', 'AuthService'];\n  GraphCtrl.$inject = ['$scope', '$log', '$timeout', '$interval', '$q', 'uiGridConstants', 'GraphService'];\n  HelpCtrl.$inject = ['$scope', '$location', 'AnchorScroll'];\n}());\n"]}