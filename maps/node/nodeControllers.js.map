{"version":3,"sources":["node/nodeControllers.js"],"names":["NodeCtrl","$scope","$rootScope","$state","$uibModal","$log","$interval","uiGridConstants","$q","AuthService","ProxyService","ValidationService","NodeFactory","WSConnService","ModalService","HealthService","node","dataLoaded","dirty","selectedRow","selectedRows","WSAuth","isData","updateTimer","status","err","tags","info","$watch","newVal","oldVal","resource","query","data","console","log","addEditTags","row","open","updateTags","stop","selected","nodeResource","update","vpc","id","gridApi","selection","clearSelectedRows","getData","start","pingIP","ip","ping","type","addSelected","push","removeSelected","index","indexOf","splice","isSelected","i","length","polling","setTimeout","pollData","clearTimeout","$cancelRequest","obj","getInfo","conn","getConnection","setList","nodes","gridOptions","j","isSaved","statuses","setOnline","enableCellEditOnFocus","enableFiltering","rowHeight","showGridFooter","cellEditableCondition","entity","rowEditWaitInterval","validators","columnDefs","name","displayName","field","width","cellTemplate","enableCellEdit","required","ipAddress","newRow","getObj","port","desc","addRow","isRowFilled","key","cancelRow","errSave","saveRow","instanceID","filter","newNode","$save","enableNodes","counter","nodeSelected","getSelectedRows","e","disableNodes","enableNode","disableNode","deleteRow","deleteSelectedRow","delete","deleteRows","deleteSelectedRows","$on","event","loggedOut","delNode","delNodes","wsAuth","wsNotAuth","errNode","params","addConn","delConn","errConn","awsConfig","awsSave","awsSaved","awsErr","onRegisterApi","rowEdit","on","rowSelectionChanged","rowSelectionChangedBatch","rows","getSelectAllState","getDirtyRows","PingConnCtrl","$uibModalInstance","pingCtrl","detail","Ok","close","ErrorCtrl","errCtrl","errors","val","JSON","parse","message","split","$broadcast","DeleteRowsCtrl","delRows","Cancel","dismiss","DeleteRowCtrl","delRow","SelectRowsCtrl","selRows","NodeTagsCtrl","ntg","createTag","lastTag","undefined","tag","value","deleteTag","deleteAlltags","save","cancel","angular","module","controller","$inject"],"mappings":"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","file":"../../components/node/nodeControllers.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n\n  /**\nNode Controllers\n**/\n  function NodeCtrl ($scope, $rootScope, $state, $uibModal, $log, $interval, uiGridConstants, $q, AuthService, ProxyService, ValidationService, NodeFactory, WSConnService, ModalService, HealthService) {\n\n    const node = this;\n    node.dataLoaded = false;\n    node.dirty = 0;\n    node.selectedRow;\n    node.selectedRows = [];\n    node.WSAuth = false;\n    node.isData = false;\n    node.updateTimer;\n    node.status = false;\n    node.err = false;\n    node.tags = [];\n    node.info = '';\n\n    // Watching policy details\n    $scope.$watch('node.tags', function (newVal, oldVal) {\n      if (newVal !== oldVal) {\n        node.tags = newVal;\n      }\n    }, true);\n\n    ProxyService.resource.query((data) => {\n      node.info = data;\n    }, (err) => {\n      console.log(err);\n    });\n\n    node.addEditTags = function (row) {\n      ModalService.open('md', 'nodesTagsAddEditTpl.html', 'NodeTagsCtrl', 'ntg', row);\n    };\n\n    node.updateTags = function (row) {\n      node.stop();\n      row.selected = true;\n      node.selectedRow = row;\n      return NodeFactory.nodeResource.update({\n        vpc: row.vpc,\n        id: row.id\n      }, {\n        status: row.status,\n        tags: row.tags\n      }, (data) => {\n        node.gridApi.selection.clearSelectedRows();\n        row.selected = false;\n        node.getData();\n        node.start();\n      }, (err) => {\n        err.row = row;\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        node.start();\n      });\n    };\n\n\n    node.pingIP = function (row) {\n      if (row.ip) { // Ping connection\n        HealthService.resource.ping({\n          type: 'ping',\n          ip: row.ip\n        }, {}, function (data) {\n          ModalService.open('md', 'pingConnTpl.html', 'PingConnCtrl', 'pingCtrl', data);\n        }, function (err) {\n          ModalService.open('md', 'errorConnectionTpl.html', 'ErrorConnCtrl', 'errCtrl', err);\n        });\n      }\n    };\n\n    // To keep track of rows selected so that Enable/Disable buttons could be disabled or not\n    node.addSelected = function (row) {\n      node.selectedRows.push(row);\n    };\n    node.removeSelected = function (row) {\n      const index = node.selectedRows.indexOf(row);\n      if (index > -1) {\n        node.selectedRows.splice(index, 1);\n      }\n    };\n    node.isSelected = function (row) {\n      for (let i = 0; i < node.selectedRows.length; i++) {\n        if (row === node.selectedRows[i]) {\n          return true;\n        }\n      }\n    };\n\n    node.polling = function () {\n      node.updateTimer = setTimeout(function () {\n        node.pollData(node.polling);\n      }, 3000);\n    };\n\n    node.start = function () {\n      clearTimeout(node.updateTimer);\n      node.polling();\n    };\n\n    node.stop = function () {\n      NodeFactory.nodeResource.query().$cancelRequest();\n      clearTimeout(node.updateTimer);\n    };\n\n\n    node.pollData = function (polling) {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        const conn = WSConnService.getConnection();\n        if (conn) {\n          NodeFactory.nodeResource.query((data) => {\n            // Keep nodes list in service to be used by DNodes\n            NodeFactory.setList(data);\n            if (data && data.nodes.length > 0) {\n              node.isData = true;\n              node.gridOptions.data = [];\n              for (let j = 0; j < data.nodes.length; j++) {\n                node.gridOptions.data.push(data.nodes[j]);\n                node.gridOptions.data[j].isSaved = true;\n                node.gridOptions.data[j].statuses = node.statuses;\n              }\n            } else {\n              node.gridOptions.data = [];\n            }\n            polling();\n          }, (err) => {\n            if (err.status === 404) {\n              node.isData = false;\n            }\n            if (err.status !== -1) {\n              polling();\n            }\n            console.log(err);\n          });\n        } else {\n          polling();\n        }\n      } else {\n        polling();\n      }\n    };\n\n\n    node.getData = function () {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        const conn = WSConnService.getConnection();\n        if (conn) {\n          NodeFactory.nodeResource.query((data) => {\n            // Keep nodes list in service to be used by DNodes\n            NodeFactory.setList(data);\n            if (data && data.nodes.length > 0) {\n              node.isData = true;\n              node.gridOptions.data = [];\n              for (let j = 0; j < data.nodes.length; j++) {\n                node.gridOptions.data.push(data.nodes[j]);\n                node.gridOptions.data[j].isSaved = true;\n                node.gridOptions.data[j].statuses = node.statuses;\n              }\n            } else {\n              node.gridOptions.data = [];\n            }\n          }, (err) => {\n            if (err.status === 404) {\n              node.isData = false;\n            }\n          });\n        }\n      }\n    };\n\n    node.setOnline = function (data) {\n      if (data.status === 'offline') {\n        data.status = 'online';\n      } else {\n        data.status = 'offline';\n      }\n    };\n\n    /** Initialize gridOptions **/\n    node.gridOptions = {};\n\n    node.gridOptions = {\n      enableCellEditOnFocus: true,\n      enableFiltering: false,\n      rowHeight: 35,\n      showGridFooter: true,\n      cellEditableCondition: function (node) {\n        return !node.row.entity.isSaved; // Disable row edit for saved row\n      },\n\n      /** Disable auto-save of rows **/\n      rowEditWaitInterval: -1\n    };\n\n\n    const validators = ValidationService;\n    node.gridOptions.columnDefs = [\n      {\n        name: 'status',\n        displayName: 'STATUS',\n        field: 'status',\n        width: '6%',\n        cellTemplate: 'partials/templates/nodeStatusTemplate.html',\n        enableCellEdit: false\n      },\n      {\n        name: 'id',\n        displayName: 'INSTANCE ID',\n        field: 'id',\n        width: '18%',\n        cellTemplate: 'partials/templates/nodeTpl.html',\n        enableCellEdit: true\n      },\n      {\n        name: 'vpc',\n        displayName: 'VPC ID',\n        field: 'vpc',\n        width: '10%',\n        enableCellEdit: true\n      },\n      {\n        name: 'ip',\n        displayName: 'IP',\n        field: 'ip',\n        width: '10%',\n        validators: {\n          required: true,\n          ipAddress: 'aaa.bbb.ccc.ddd'\n        },\n        cellTemplate: 'ui-grid/cellTooltipValidator',\n        enableCellEdit: true\n      },\n      // { name: 'port', displayName: 'PORT', field: 'port', width: '8%', validators: { required: true, portNum: ' ' }, cellTemplate: 'ui-grid/cellTooltipValidator', enableCellEdit: true},\n      {\n        name: 'name',\n        displayName: 'NAME',\n        field: 'name',\n        width: '18%', // , cellEditableCondition: function() {\n        // return true; // Name is editable for saved row as well }\n        cellTemplate: 'partials/templates/nodeTpl.html'\n      },\n      {\n        name: 'tags',\n        displayName: 'TAGS',\n        field: 'tags',\n        width: '8%',\n        cellTemplate: 'partials/templates/nodeTagsTpl.html',\n        enableCellEdit: false\n      },\n      {\n        name: 'desc',\n        displayName: 'DESCRIPTION',\n        field: 'desc',\n        width: '15%',\n        enableCellEdit: true\n      },\n      {\n        name: ' ',\n        width: '11%',\n        cellTemplate: 'partials/templates/nodeStatsTemplate.html',\n        enableCellEdit: false\n      }\n    ];\n\n    let obj = {};\n    obj.newRow = true;\n\n    node.getObj = function () {\n      obj = {\n        status: 'offline',\n        name: ' ',\n        id: ' ',\n        ip: ' ',\n        // Port is hidden in UI but for now sending null port\n        port: 80,\n        desc: ' ',\n        vpc: ' ',\n        tags: [],\n        '': ' '\n      };\n      obj.selected = false;\n      return obj;\n    };\n\n\n    node.addRow = function () {\n      node.stop();\n      if (obj.newRow === true) {\n        obj.newRow = false;\n        NodeFactory.addRow(node.gridOptions.data, node.getObj());\n        console.log(node.gridOptions.data);\n      } else {\n        return;\n      }\n    };\n\n    node.isRowFilled = function (row) {\n      for (const key in row) {\n        if ((row[key] === ' ' || row[key] === '') && key !== '' && key !== 'desc') {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    node.cancelRow = function (data, row) {\n      data.splice(data.indexOf(row), 1);\n      obj.newRow = true;\n      node.status = false;\n      node.start();\n    };\n\n    node.errSave = function () {\n      console.log('error saving a node');\n    };\n\n    node.saveRow = function (data, row) {\n      row.selected = true;\n      if (row.instanceID !== ' ' && row.instanceID !== '' && row.ip !== ' ' && row.ip !== '') {\n        row.filter = false;\n        const newNode = new NodeFactory.nodeResource(row);\n        return newNode.$save((data) => {\n          node.gridApi.selection.clearSelectedRows();\n          row.isSaved = true;\n          row.newRow = true;\n          row.selected = false;\n          node.getData();\n          node.start();\n          node.status = false;\n        }, (err) => {\n          err.row = row;\n          row.selected = false;\n          ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        });\n      }\n    };\n\n    // Using ui-grid selection to get selected rows\n    node.enableNodes = function () {\n      node.stop();\n      let counter = 0;\n      const nodeSelected = node.gridApi.selection.getSelectedRows();\n      for (let i = 0; i < nodeSelected.length; i++) {\n        const e = nodeSelected[i];\n        if (e.isSaved && e.status === 'offline') {\n          e.selected = true;\n          NodeFactory.nodeResource.update({\n            vpc: e.vpc,\n            id: e.id\n          }, {status: 'online'}, (data) => {\n            e.selected = false;\n            counter++;\n            if (counter === nodeSelected.length) {\n              node.getData();\n              node.gridApi.selection.clearSelectedRows();\n              node.start();\n              return;\n            }\n          }, (err) => {\n            err.row = e;\n            ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n            node.start();\n          });\n        } else {\n          counter++;\n          node.gridOptions.data.splice(node.gridOptions.data.indexOf(e), 1);\n          obj.newRow = true;\n        }\n      }\n    };\n\n\n    node.disableNodes = function () {\n      node.stop();\n      let counter = 0;\n      const nodeSelected = node.gridApi.selection.getSelectedRows();\n      for (let i = 0; i < nodeSelected.length; i++) {\n        const e = nodeSelected[i];\n        if (e.isSaved && e.status === 'online') {\n          e.selected = true;\n          NodeFactory.nodeResource.update({\n            vpc: e.vpc,\n            id: e.id\n          }, {status: 'offline'}, (data) => {\n            e.selected = false;\n            counter++;\n            if (counter === nodeSelected.length) {\n              node.getData();\n              node.gridApi.selection.clearSelectedRows();\n              node.start();\n              return;\n            }\n          }, (err) => {\n            err.row = e;\n            ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n            node.start();\n          });\n        } else {\n          counter++;\n          node.gridOptions.data.splice(node.gridOptions.data.indexOf(e), 1);\n          obj.newRow = true;\n        }\n      }\n    };\n\n    node.enableNode = function (row) {\n      node.stop();\n      row.selected = true;\n      node.selectedRow = row;\n      return NodeFactory.nodeResource.update({\n        vpc: row.vpc,\n        id: row.id\n      }, {status: 'online'}, (data) => {\n        node.gridApi.selection.clearSelectedRows();\n        row.selected = false;\n        node.getData();\n        node.start();\n      }, (err) => {\n        err.row = row;\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        node.start();\n      });\n    };\n\n    node.disableNode = function (row) {\n      node.stop();\n      row.selected = true;\n      node.selectedRow = row;\n      return NodeFactory.nodeResource.update({\n        vpc: row.vpc,\n        id: row.id\n      }, {status: 'offline'}, (data) => {\n        node.gridApi.selection.clearSelectedRows();\n        row.selected = false;\n        node.getData();\n        node.start();\n      }, (err) => {\n        err.row = row;\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        node.start();\n      });\n\n    };\n\n    node.deleteRow = function (row) {\n      ModalService.open('md', 'deleteRowConfirmationTemplate.html', 'DeleteRowCtrl', 'delRow', row);\n    };\n\n    node.deleteSelectedRow = function (row) {\n      node.stop();\n      row.selected = true;\n      if (row.isSaved) {\n        return NodeFactory.nodeResource.delete({\n          vpc: row.vpc,\n          id: row.id\n        }, (data) => {\n          node.gridApi.selection.clearSelectedRows();\n          NodeFactory.deleteRow(node.gridOptions.data, row);\n          row.selected = false;\n          node.getData();\n          node.start();\n        }, (err) => {\n          err.row = row;\n          ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n          node.start();\n        });\n      }\n      node.gridOptions.data.splice(node.gridOptions.data.indexOf(row), 1);\n      obj.newRow = true;\n\n    };\n\n    node.deleteRows = function () {\n      if (node.gridApi.selection.getSelectedRows().length > 0) {\n        ModalService.open('md', 'deleteRowsConfirmationTemplate.html', 'DeleteRowsCtrl', 'delRows');\n      } else {\n        ModalService.open('md', 'selectRowsTemplate.html', 'SelectRowsCtrl', 'selRows');\n      }\n    };\n\n    node.deleteSelectedRows = function () {\n      node.stop();\n      let counter = 0;\n      const nodeSelected = node.gridApi.selection.getSelectedRows();\n      for (let i = 0; i < nodeSelected.length; i++) {\n        const e = nodeSelected[i];\n        if (e.isSaved) {\n          e.selected = true;\n          NodeFactory.nodeResource.delete({\n            vpc: e.vpc,\n            id: e.id\n          }, (data) => {\n            NodeFactory.deleteRow(node.gridOptions.data, e);\n            counter++;\n            if (counter === nodeSelected.length) {\n              node.gridApi.selection.clearSelectedRows();\n              node.getData();\n              node.start();\n              return;\n            }\n          }, (err) => {\n            err.row = row;\n            ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n            console.log(err);\n            node.start();\n          });\n        } else {\n          node.gridOptions.data.splice(node.gridOptions.data.indexOf(e), 1);\n          obj.newRow = true;\n        }\n      }\n\n    };\n\n    // Event handlers ================================================================\n    const updateTags = $rootScope.$on('update-tags', function (event, row) {\n      console.log('update-tags');\n      node.updateTags(row);\n    });\n\n    const loggedOut = $rootScope.$on('logged-out', function () {\n      node.stop();\n    });\n\n    const delNode = $rootScope.$on('del-node', function (event, row) {\n      node.deleteSelectedRow(row);\n    });\n\n    const delNodes = $rootScope.$on('del-nodes', function () {\n      node.deleteSelectedRows();\n    });\n\n    const wsAuth = $rootScope.$on('ws-auth', function (event) {\n      node.WSAuth = true;\n    });\n\n    const wsNotAuth = $rootScope.$on('ws-not-auth', function () {\n      node.WSAuth = false;\n      node.gridOptions.data = [];\n    });\n\n    const errNode = $rootScope.$on('err-node', function (event, params) {\n      node.errSave();\n    });\n\n    const addConn = $rootScope.$on('wsconn-added', function () {\n      node.start();\n    });\n\n    const delConn = $rootScope.$on('delConn', function (event, row) {\n      node.gridOptions.data = [];\n      node.stop();\n    });\n\n\n    const errConn = $rootScope.$on('err-wsconn', function (event, params) {\n      node.stop();\n    });\n\n    const awsConfig = $rootScope.$on('aws-config', function (event) {\n      node.stop();\n    });\n\n    const awsSave = $rootScope.$on('aws-save', function (event) {\n      node.stop();\n    });\n\n    const awsSaved = $rootScope.$on('aws-saved', function (event) {\n      node.start();\n    });\n\n    const awsErr = $rootScope.$on('aws-err', function (event) {\n      node.stop();\n    });\n\n\n    $scope.$on('$destroy', function () {\n      updateTags();\n      node.stop();\n      loggedOut();\n      delNode();\n      delNodes();\n      wsAuth();\n      wsNotAuth();\n      errNode();\n      addConn();\n      errConn();\n      awsConfig();\n      awsSave();\n      awsSaved();\n      awsErr();\n    });\n\n    node.gridOptions.onRegisterApi = function (gridApi) {\n      node.gridApi = gridApi;\n      node.gridApi.rowEdit.on.saveRow(null, node.saveRow);\n      node.gridApi.selection.on.rowSelectionChanged(null, function (row) {\n        if (row.isSelected) {\n          node.stop();\n          node.addSelected(row.entity);\n        } else {\n          node.start();\n          node.removeSelected(row.entity);\n        }\n      });\n      node.gridApi.selection.on.rowSelectionChangedBatch(null, function (rows) {\n        if (node.gridApi.selection.getSelectAllState()) {\n          node.start();\n          const nodes = node.gridOptions.data;\n          for (let i = 0; i < nodes.length; i++) {\n            node.removeSelected(nodes[i]);\n          }\n        } else {\n          node.stop();\n          const nodes = node.gridOptions.data;\n          for (let j = 0; j < nodes.length; j++) {\n            node.addSelected(nodes[j]);\n          }\n        }\n\n      });\n\n      node.dirty = node.gridApi.rowEdit.getDirtyRows();\n\n    };\n\n    node.getData();\n    node.start();\n  }\n\n\n  function PingConnCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const pingCtrl = this;\n    pingCtrl.data = params.detail;\n    pingCtrl.Ok = function () {\n      $uibModalInstance.close();\n    };\n  }\n\n  function ErrorCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const errCtrl = this;\n    errCtrl.err = params;\n    if (params.data) {\n      if (params.data.errors.detail.indexOf('message') !== -1) {\n        const val = JSON.parse(params.data.errors.detail).message;\n        if (val.indexOf('body') !== -1) {\n          errCtrl.err.detail = val.split('body:')[1];\n        } else {\n          errCtrl.err.detail = val;\n        }\n      } else {\n        errCtrl.err.detail = params.data.errors.detail;\n      }\n\n    } else {\n      errCtrl.err.detail = 'Details not available';\n    }\n\n    errCtrl.Ok = function () {\n      $rootScope.$broadcast('err-node', params);\n      $uibModalInstance.close();\n    };\n  }\n\n\n  function DeleteRowsCtrl ($scope, $rootScope, $uibModalInstance) {\n    const delRows = this;\n\n    delRows.Ok = function () {\n      $rootScope.$broadcast('del-nodes');\n      $uibModalInstance.close();\n    };\n\n    delRows.Cancel = function () {\n      $uibModalInstance.dismiss('cancel');\n    };\n  }\n\n\n  function DeleteRowCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const delRow = this;\n    delRow.Ok = function () {\n      $rootScope.$broadcast('del-node', params);\n      $uibModalInstance.close();\n    };\n\n    delRow.Cancel = function () {\n      $uibModalInstance.dismiss('cancel');\n    };\n  }\n\n\n  function SelectRowsCtrl ($scope, $rootScope, $uibModalInstance) {\n    const selRows = this;\n    selRows.close = function () {\n      $uibModalInstance.close();\n    };\n  }\n\n\n  function NodeTagsCtrl ($scope, $rootScope, $uibModalInstance, params, $log) {\n    const ntg = this;\n    ntg.params = params;\n\n    ntg.createTag = function () {\n      if (ntg.params.tags) {\n        const tags = ntg.params.tags;\n        if (tags && tags.length > 0) {\n          const lastTag = tags[tags.length - 1];\n          if (lastTag.key !== undefined && lastTag.key !== '' && lastTag.key !== ' ') {\n            const tag = {\n              key: '',\n              value: ''\n            };\n            ntg.params.tags.push(tag);\n          }\n        } else {\n          params.tags = [];\n          ntg.params.tags = params.tags;\n          const tag = {\n            key: '',\n            value: ''\n          };\n          ntg.params.tags.push(tag);\n        }\n      }\n\n    };\n\n    ntg.deleteTag = function (index) {\n      ntg.params.tags.splice(index, 1);\n    };\n\n    ntg.deleteAlltags = function () {\n      ntg.params.tags.length = 0;\n    };\n\n    ntg.save = function () {\n      if (ntg.params.isSaved) {\n        $rootScope.$broadcast('update-tags', params);\n      } else {\n        $log.log('just wait for save of node');\n      }\n      $uibModalInstance.close();\n    };\n\n    ntg.cancel = function () {\n      $uibModalInstance.dismiss('cancel');\n    };\n  }\n\n\n  angular.module('nodeControllers', []).\n    controller('NodeCtrl', NodeCtrl).\n    controller('ErrorCtrl', ErrorCtrl).\n    controller('DeleteRowCtrl', DeleteRowCtrl).\n    controller('DeleteRowsCtrl', DeleteRowsCtrl).\n    controller('SelectRowsCtrl', SelectRowsCtrl).\n    controller('PingConnCtrl', PingConnCtrl).\n    controller('NodeTagsCtrl', NodeTagsCtrl);\n\n  /** Inject the dependencies - avoid problems during minification **/\n  NodeCtrl.$inject = ['$scope', '$rootScope', '$state', '$uibModal', '$log', '$interval', 'uiGridConstants', '$q', 'AuthService', 'ProxyService', 'ValidationService', 'NodeFactory', 'WSConnService', 'ModalService', 'HealthService'];\n  ErrorCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  DeleteRowsCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance'];\n  DeleteRowCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  SelectRowsCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance'];\n  PingConnCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  NodeTagsCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params', '$log'];\n\n}());\n"]}