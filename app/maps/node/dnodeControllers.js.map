{"version":3,"sources":["node/dnodeControllers.js"],"names":["DNodeCtrl","$scope","$rootScope","$state","$uibModal","$log","$interval","uiGridConstants","$q","AuthService","ProxyService","ValidationService","NodeFactory","DiscNodeService","ModalService","dn","dataLoaded","dirty","selectedRow","selectedRows","WSAuth","isData","availNodes","selNodes","selected","polling","auto","discover","publish","autoOpts","selectedOption","enable","selectedFilterOpt","key","value","vendor","infoUpdateTimer","updateTimer","configUpdateTimer","statusUpdateTimer","$watch","newVal","oldVal","log","infoPolling","setTimeout","pollInfo","infoStart","clearTimeout","infoStop","obj","getInfo","status","options","filterOptions","submitAuto","tagFilter","filterIf","config","save","data","open","start","err","pollData","configPolling","pollConfig","stop","get","$cancelRequest","resource","query","setAuth","console","message","nodes","length","pnodes","getList","reduce","prev","isDuplicate","i","id","push","getData","electedOption","moveItem","item","from","to","node","JSON","parse","idx","map","e","indexOf","splice","index","moveAll","angular","forEach","publishNodes","counter","nodeResource","$save","errors","row","autoDiscover","stopAutoDiscover","autoPublish","stopAutoPublish","loggedOut","$on","wsAuth","event","addConn","isActive","errConn","params","awsConfig","awsSave","awsSaved","awsErr","getLogged","ErrorCtrl","$uibModalInstance","errCtrl","detail","val","split","Ok","$broadcast","close","AutoConfigCtrl","autoConfig","module","controller","$inject"],"mappings":"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","file":"../../components/node/dnodeControllers.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n  function DNodeCtrl ($scope, $rootScope, $state, $uibModal, $log, $interval, uiGridConstants, $q, AuthService, ProxyService, ValidationService, NodeFactory, DiscNodeService, ModalService) {\n\n    const dn = this;\n    dn.dataLoaded = false;\n    dn.dirty = 0;\n    dn.selectedRow;\n    dn.selectedRows = [];\n    dn.WSAuth = false;\n    dn.isData = false;\n    dn.availNodes = [];\n    dn.selNodes = [];\n    $scope.selected = '';\n    dn.polling = true;\n    dn.auto = false;\n    dn.discover = false;\n    dn.publish = false;\n    dn.autoOpts = {};\n    dn.autoOpts.selectedOption = 'NO DISCOVERY';\n    dn.autoOpts.enable = false;\n    dn.autoOpts.selectedFilterOpt = 'tagged';\n    dn.autoOpts.key = null;\n    dn.autoOpts.value = null;\n    dn.vendor = '';\n    dn.infoUpdateTimer;\n    dn.updateTimer;\n    dn.configUpdateTimer;\n    dn.statusUpdateTimer;\n\n\n    $scope.$watch('dn.autoOpts', function (newVal, oldVal) {\n      if (newVal !== oldVal) {\n        dn.autoOpts = newVal;\n        $log.log('new value');\n        $log.log(newVal);\n      }\n    }, true);\n\n    dn.infoPolling = function () {\n      dn.statusUpdateTimer = setTimeout(function () {\n        dn.pollInfo(dn.infoPolling);\n      }, 1500);\n    };\n\n    dn.infoStart = function () {\n      clearTimeout(dn.statusUpdateTimer);\n      dn.infoPolling();\n    };\n\n    dn.infoStop = function () {\n      clearTimeout(dn.statusUpdateTimer);\n    };\n\n    dn.pollInfo = function (polling) {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        dn.vendor = obj.vendor;\n      } else {\n        polling();\n      }\n    };\n\n    dn.options = ['NO DISCOVERY', 'AUTO DISCOVERY', 'AUTO PUBLISH'];\n\n    dn.filterOptions = ['tagged', 'notTagged'];\n\n    dn.submitAuto = function () {\n      const obj = {};\n      if (dn.autoOpts.selectedOption === 'NO DISCOVERY') {\n        obj.discover = false;\n        obj.publish = false;\n      } else if (dn.autoOpts.selectedOption === 'AUTO DISCOVERY') {\n        obj.discover = true;\n        obj.publish = false;\n      } else if (dn.autoOpts.selectedOption === 'AUTO PUBLISH') {\n        obj.discover = true;\n        obj.publish = true;\n      }\n      obj.tagFilter = {};\n      obj.tagFilter.enable = dn.autoOpts.enable;\n      if (dn.autoOpts.enable) {\n        obj.tagFilter.filterIf = dn.autoOpts.selectedFilterOpt;\n        obj.tagFilter.key = dn.autoOpts.key;\n        obj.tagFilter.value = dn.autoOpts.value;\n      } else {\n        obj.tagFilter.filterIf = 'tagged';\n        obj.tagFilter.key = null;\n        obj.tagFilter.value = null;\n      }\n\n      return DiscNodeService.config.save({vendor: dn.vendor}, obj, (data) => {\n        if (dn.discover && dn.publish) {\n          dn.autoOpts.selectedOption = dn.options[2];\n        } else if (dn.discover && !dn.publish) {\n          dn.autoOpts.selectedOption = dn.options[1];\n        }\n        ModalService.open('md', 'autoConfigTpl.html', 'AutoConfigCtrl', 'autoConfig', data);\n        dn.start();\n      }, (err) => {\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        dn.auto = false;\n        dn.start();\n      });\n    };\n\n\n    dn.polling = function () {\n      dn.updateTimer = setTimeout(function () {\n        dn.pollData(dn.polling);\n      }, 3000);\n    };\n\n    dn.configPolling = function () {\n      dn.configUpdateTimer = setTimeout(function () {\n        dn.pollConfig(dn.configPolling);\n      }, 3000);\n    };\n\n    dn.start = function () {\n      clearTimeout(dn.updateTimer);\n      clearTimeout(dn.configUpdateTimer);\n      dn.polling();\n      dn.configPolling();\n    };\n\n    dn.stop = function () {\n      DiscNodeService.config.get().$cancelRequest();\n      DiscNodeService.resource.query().$cancelRequest();\n      clearTimeout(dn.updateTimer);\n      clearTimeout(dn.configUpdateTimer);\n    };\n\n    dn.pollConfig = function (polling) {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        DiscNodeService.config.get({vendor: obj.vendor}, {}, (data) => {\n          dn.discover = data.discover;\n          dn.publish = data.publish;\n          dn.autoOpts.key = data.tagFilter.key;\n          dn.autoOpts.value = data.tagFilter.value;\n          dn.autoOpts.enable = data.tagFilter.enable;\n          dn.autoOpts.selectedFilterOpt = data.tagFilter.filterIf;\n          if (dn.discover && dn.publish) {\n            dn.autoOpts.selectedOption = dn.options[2];\n          } else if (dn.discover && !dn.publish) {\n            dn.autoOpts.selectedOption = dn.options[1];\n          }\n          polling();\n        }, (err) => {\n          DiscNodeService.setAuth(false);\n          console.log(err);\n          polling();\n        });\n      } else {\n        polling();\n      }\n    };\n\n\n    /** Get data from Server **/\n    dn.pollData = function (polling) {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        DiscNodeService.resource.query((data) => {\n          if (data && data.message) {\n            dn.availNodes = []; // Reset discovered nodes\n          }\n          dn.isData = true;\n          // Hide nodes if NO AUTO DISCOVER/PUBLISH\n          if (dn.discover === false && dn.publish === false) {\n            dn.availNodes = [];\n            return;\n          }\n          if (data && data.nodes && data.nodes.length > 0) {\n            dn.availNodes = data.nodes;\n            const pnodes = NodeFactory.getList();\n            // Don't add nodes that is already been published in BIG IP\n            dn.availNodes = dn.availNodes.reduce(function (prev, value) {\n              let isDuplicate = false;\n\n              if (pnodes && pnodes.length > 0) {\n                for (let i = 0; i < pnodes.length; i++) {\n                  if (value.id === pnodes[i].id) {\n                    isDuplicate = true;\n                    break;\n                  }\n                }\n\n              }\n              if (!isDuplicate) {\n                prev.push(value);\n              }\n              return prev;\n            }, []);\n          }\n          polling();\n        }, (err) => {\n          console.log(err);\n          if (err.status === 404) {\n            dn.isData = false;\n          }\n          if (err.status !== -1) {\n            polling();\n          }\n        });\n      } else {\n        polling();\n      }\n\n    };\n\n\n    dn.getData = function () {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        DiscNodeService.config.get({vendor: dn.vendor}, {}, (data) => {\n          $log.log('data');\n          $log.log(data);\n          dn.discover = data.discover;\n          dn.publish = data.publish;\n          dn.autoOpts.key = data.tagFilter.key;\n          dn.autoOpts.value = data.tagFilter.value;\n          dn.autoOpts.enable = data.tagFilter.enable;\n          dn.autoOpts.selectedFilterOpt = data.tagFilter.filterIf;\n          if (dn.discover && dn.publish) {\n            dn.autoOpts.electedOption = dn.options[2];\n          } else if (dn.discover && !dn.publish) {\n            dn.autoOpts.selectedOption = dn.options[1];\n          }\n        }, (err) => {\n          console.log(err);\n        });\n        if (dn.discover === false && dn.publish === false) {\n          dn.availNodes = [];\n          return;\n        }\n        DiscNodeService.resource.query((data) => {\n          dn.isData = true;\n          if (data && data.nodes.length > 0) {\n            dn.availNodes = data.nodes;\n            const pnodes = NodeFactory.getList();\n            dn.availNodes = dn.availNodes.reduce(function (prev, value) {\n              let isDuplicate = false;\n\n              if (pnodes && pnodes.length > 0) {\n                for (let i = 0; i < pnodes.length; i++) {\n                  if (value.id === pnodes[i].id) {\n                    isDuplicate = true;\n                    break;\n                  }\n                }\n\n              }\n              if (!isDuplicate) {\n                prev.push(value);\n              }\n              return prev;\n\n            }, []);\n          }\n        }, (err) => {\n          DiscNodeService.setAuth(false);\n          ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n          console.log(err);\n          if (err.status === 404) {\n            dn.isData = false;\n          }\n        });\n      }\n    };\n\n\n    dn.moveItem = function (item, from, to) {\n      const node = JSON.parse(item);\n      const idx = from.map(function (e) {\n        return e.id;\n      }).indexOf(node.id);\n      if (idx !== -1) {\n        from.splice(idx, 1);\n        const index = to.map(function (e) {\n          return e.id;\n        }).indexOf(node.id);\n        if (index === -1) {\n          to.push(node);\n        }\n      }\n    };\n    dn.moveAll = function (from, to) {\n\n      angular.forEach(from, function (item) {\n        to.push(item);\n      });\n      from.length = 0;\n      // console.log(from.length);\n    };\n\n    dn.selNodes = [];\n\n    dn.publishNodes = function (nodes) {\n      let counter = 0;\n      dn.stop();\n      for (let i = 0; i < nodes.length; i++) {\n        const node = new NodeFactory.nodeResource(nodes[i]);\n        const idx = dn.selNodes.indexOf(node);\n        node.$save((data) => {\n          dn.selNodes.splice(idx, 1);\n          dn.getData();\n          dn.start();\n        }, (err) => {\n          if (err.data.errors.status === 403 || err.data.errors.status === 404) {\n            if (counter < 1) {\n              counter = 1;\n              dn.selNodes = [];\n              ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n              dn.start();\n              return;\n            }\n            dn.selNodes = [];\n            dn.start();\n            return;\n\n          }\n          dn.selNodes.splice(idx, 1);\n          err.row = nodes[i];\n          ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n          dn.start();\n\n        });\n      }\n    };\n\n    dn.autoDiscover = function () {\n      dn.auto = false;\n      const obj = {discover: true};\n      DiscNodeService.config.save({vendor: dn.vendor}, obj, (data) => {\n        dn.discover = true;\n      }, (err) => {\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        dn.auto = false;\n      });\n    };\n\n    dn.stopAutoDiscover = function () {\n      dn.auto = false;\n      const obj = {discover: false};\n      DiscNodeService.config.save({vendor: dn.vendor}, obj, (data) => {\n        dn.discover = false;\n      }, (err) => {\n        DiscNodeService.setAuth(false);\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        dn.auto = true;\n      });\n    };\n\n    dn.autoPublish = function () {\n      dn.auto = true;\n      const obj = {publish: true};\n      DiscNodeService.config.save({vendor: dn.vendor}, obj, (data) => {\n        dn.publish = true;\n        dn.availNodes = [];\n      }, (err) => {\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        dn.auto = false;\n      });\n    };\n\n    dn.stopAutoPublish = function () {\n      dn.auto = false;\n      const obj = {publish: false};\n      DiscNodeService.config.save({vendor: dn.vendor}, obj, (data) => {\n        dn.publish = false;\n      }, (err) => {\n        ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n        dn.auto = true;\n      });\n    };\n\n\n    // Event handlers ================================================================\n    const loggedOut = $rootScope.$on('logged-out', function () {\n      console.log('logged-out - dnode polling stop');\n      dn.stop();\n    });\n\n    const wsAuth = $rootScope.$on('ws-auth', function (event) {});\n\n    const addConn = $rootScope.$on('wsconn-added', function () {\n      dn.isActive = true;\n    });\n\n\n    const errConn = $rootScope.$on('err-wsconn', function (event, params) {\n      dn.stop();\n    });\n\n    const awsConfig = $rootScope.$on('aws-config', function (event) {\n      dn.stop();\n    });\n\n    const awsSave = $rootScope.$on('aws-save', function (event) {\n      dn.stop();\n    });\n\n    const awsSaved = $rootScope.$on('aws-saved', function (event) {});\n\n    const awsErr = $rootScope.$on('aws-err', function (event) {\n      dn.stop();\n    });\n\n    $scope.$on('$destroy', function () {\n      dn.stop();\n      loggedOut();\n      wsAuth();\n      addConn();\n      errConn();\n      awsConfig();\n      awsSave();\n      awsSaved();\n      awsErr();\n    });\n\n\n    if (AuthService.getLogged()) {\n      dn.infoStart();\n      wsAuth();\n      addConn();\n    }\n\n    dn.getData();\n    dn.start();\n\n  }\n\n  function ErrorCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const errCtrl = this;\n    errCtrl.err = params;\n    if (params.data) {\n      if (params.data.errors.detail.indexOf('message') !== -1) {\n        const val = JSON.parse(params.data.errors.detail).message;\n        if (val.indexOf('body') !== -1) {\n          errCtrl.err.detail = val.split('body:')[1];\n        } else {\n          errCtrl.err.detail = val;\n        }\n      } else {\n        errCtrl.err.detail = params.data.errors.detail;\n      }\n\n    } else {\n      errCtrl.err.detail = 'Details not available';\n    }\n\n    errCtrl.Ok = function () {\n      $rootScope.$broadcast('err-node', params);\n      $uibModalInstance.close();\n    };\n  }\n\n\n  function AutoConfigCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const autoConfig = this;\n    autoConfig.detail = params.detail;\n    autoConfig.close = function () {\n      $uibModalInstance.close();\n    };\n  }\n\n  angular.module('dnodeControllers', []).\n    controller('DNodeCtrl', DNodeCtrl).\n    controller('ErrorCtrl', ErrorCtrl).\n    controller('AutoConfigCtrl', AutoConfigCtrl);\n\n  /** Inject the dependencies - avoid problems during minification **/\n  DNodeCtrl.$inject = ['$scope', '$rootScope', '$state', '$uibModal', '$log', '$interval', 'uiGridConstants', '$q', 'AuthService', 'ProxyService', 'ValidationService', 'NodeFactory', 'DiscNodeService', 'ModalService'];\n  ErrorCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  AutoConfigCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n}());\n"]}