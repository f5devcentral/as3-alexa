{"version":3,"sources":["node/nodeControllers.js"],"names":["NodeCtrl","$scope","$rootScope","$state","$uibModal","$log","$interval","uiGridConstants","$q","ValidationService","NodeFactory","ModalService","node","dataLoaded","dirty","selectedRows","WSAuth","isData","status","err","info","newVal","oldVal","$watch","addEditTags","row","open","updateTags","stop","selected","resource","update","selectedRow","id","tags","gridApi","start","polling","updateTimer","setTimeout","clearTimeout","query","$cancelRequest","pollData","setList","nodes","message","data","gridOptions","length","j","push","isSaved","statuses","console","log","getData","enableCellEditOnFocus","enableFiltering","rowHeight","showGridFooter","cellEditableCondition","entity","rowEditWaitInterval","name","columnDefs","displayName","field","width","cellTemplate","enableCellEdit","validators","required","ipAddress","obj","newRow","getObj","desc","vpc","ip","port","$on","event","onRegisterApi","isSelected","selection","getSelectAllState","on","rowSelectionChangedBatch","rows","params","rowEdit","getDirtyRows","ErrorCtrl","$uibModalInstance","errCtrl","detail","indexOf","val","JSON","parse","errors","Ok","split","close","lastTag","NodeTagsCtrl","ntg","tag","this","createTag","value","index","key","deleteAlltags","deleteTag","splice","save","$inject","$broadcast","cancel","dismiss","angular","module","controller"],"mappings":"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","file":"../../components/node/nodeControllers.js","sourcesContent":["/**\n * Copyright (c) 2018, F5 Networks, Inc. \n */\n\n(function () {\n\n    /**\nNode Controllers\n**/\n    function NodeCtrl ($scope, $rootScope, $state, $uibModal, $log, $interval, uiGridConstants, $q, ValidationService, NodeFactory, ModalService) {\n\n        const node = this;\n        node.dataLoaded = false;\n        node.dirty = 0;\n        node.selectedRows = [];\n        node.WSAuth = false;\n        node.isData = false;\n        node.status = false;\n        node.err = false;\n        node.tags = [];\n        node.info = '';\n\n        $scope.$watch('node.tags', function (newVal, oldVal) {\n            if (newVal !== oldVal) {\n                node.tags = newVal;\n            }\n        }, true);\n\n        node.addEditTags = function (row) {\n            ModalService.open('md', 'nodesTagsAddEditTpl.html', 'NodeTagsCtrl', 'ntg', row);\n        };\n\n        node.updateTags = function (row) {\n            node.stop();\n            row.selected = true;\n            node.selectedRow = row;\n            return NodeFactory.resource.update({\n                vpc: row.vpc,\n                id: row.id\n            }, {\n                status: row.status,\n                tags: row.tags\n            }, (data) => {\n                node.gridApi.selection.clearSelectedRows();\n                row.selected = false;\n                node.getData();\n                node.start();\n            }, (err) => {\n                err.row = row;\n                ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n                node.start();\n            });\n        };\n\n        node.polling = function () {\n            node.updateTimer = setTimeout(function () {\n                node.pollData(node.polling);\n            }, 3000);\n        };\n\n        node.start = function () {\n            clearTimeout(node.updateTimer);\n            node.polling();\n        };\n\n        node.stop = function () {\n            NodeFactory.resource.query().$cancelRequest();\n            clearTimeout(node.updateTimer);\n        };\n\n\n        node.pollData = function (polling) {\n            NodeFactory.resource.query((data) => {\n                NodeFactory.setList(data);\n                const nodes = data.message;\n                if (nodes && nodes.length > 0) {\n                    node.isData = true;\n                    node.gridOptions.data = [];\n                    for (let j = 0; j < nodes.length; j++) {\n                        node.gridOptions.data.push(nodes[j]);\n                        node.gridOptions.data[j].isSaved = true;\n                        node.gridOptions.data[j].statuses = node.statuses;\n                    }\n                } else {\n                    node.gridOptions.data = [];\n                }\n                polling();\n            }, (err) => {\n                if (err.status === 404) {\n                    node.isData = false;\n                }\n                if (err.status !== -1) {\n                    polling();\n                }\n                console.log(err);\n            });\n        };\n\n\n        node.getData = function () {\n            NodeFactory.resource.query((data) => {\n                const nodes = data.message;\n                NodeFactory.setList(nodes);\n                if (nodes && nodes.length > 0) {\n                    node.isData = true;\n                    node.gridOptions.data = [];\n                    for (let j = 0; j < nodes.length; j++) {\n                        node.gridOptions.data.push(nodes[j]);\n                        node.gridOptions.data[j].isSaved = true;\n                        node.gridOptions.data[j].statuses = node.statuses;\n                    }\n                } else {\n                    node.gridOptions.data = [];\n                }\n            }, (err) => {\n                if (err.status === 404) {\n                    node.isData = false;\n                }\n            });\n        };\n\n        /** Initialize gridOptions **/\n        node.gridOptions = {};\n\n        node.gridOptions = {\n            enableCellEditOnFocus: true,\n            enableFiltering: false,\n            rowHeight: 35,\n            showGridFooter: true,\n            cellEditableCondition: function (node) {\n                return !node.row.entity.isSaved; // Disable row edit for saved row\n            },\n\n            /** Disable auto-save of rows **/\n            rowEditWaitInterval: -1\n        };\n\n\n        const validators = ValidationService;\n        node.gridOptions.columnDefs = [\n            {\n                name: 'name',\n                displayName: 'NAME',\n                field: 'name',\n                width: '20%',\n                cellTemplate: 'partials/templates/nodeTpl.html',\n                enableCellEdit: true\n            },\n            {\n                name: 'id',\n                displayName: 'INSTANCE ID',\n                field: 'id',\n                width: '30%',\n                cellTemplate: 'partials/templates/nodeTpl.html',\n                enableCellEdit: true\n            },\n            {\n                name: 'ip',\n                displayName: 'IP',\n                field: 'ip',\n                width: '16%',\n                validators: {\n                    required: true,\n                    ipAddress: 'aaa.bbb.ccc.ddd'\n                },\n                cellTemplate: 'ui-grid/cellTooltipValidator',\n                enableCellEdit: true\n            },\n            {\n                name: 'vpc',\n                displayName: 'VPC ID',\n                field: 'vpc',\n                width: '20%',\n                enableCellEdit: true\n            },\n            {\n                name: 'tags',\n                displayName: 'TAGS',\n                field: 'tags',\n                width: '10%',\n                cellTemplate: 'partials/templates/nodeTagsTpl.html',\n                enableCellEdit: false\n            }\n        ];\n\n        let obj = {};\n        obj.newRow = true;\n\n        node.getObj = function () {\n            obj = {\n                status: 'offline',\n                name: ' ',\n                id: ' ',\n                ip: ' ',\n                // Port is hidden in UI but for now sending null port\n                port: 80,\n                desc: ' ',\n                vpc: ' ',\n                tags: [],\n                '': ' '\n            };\n            obj.selected = false;\n            return obj;\n        };\n\n\n        // Event handlers ================================================================\n        const updateTags = $rootScope.$on('update-tags', function (event, row) {\n            console.log('update-tags');\n            node.updateTags(row);\n        });\n\n\n        $scope.$on('$destroy', function () {\n            updateTags();\n            node.stop();\n        });\n\n        node.gridOptions.onRegisterApi = function (gridApi) {\n            node.gridApi = gridApi;\n            node.gridApi.rowEdit.on.saveRow(null, node.saveRow);\n            node.gridApi.selection.on.rowSelectionChanged(null, function (row) {\n                if (row.isSelected) {\n                    node.stop();\n                } else {\n                    node.start();\n                }\n            });\n            node.gridApi.selection.on.rowSelectionChangedBatch(null, function (rows) {\n                if (node.gridApi.selection.getSelectAllState()) {\n                    node.start();\n                } else {\n                    node.stop();\n                }\n\n            });\n\n            node.dirty = node.gridApi.rowEdit.getDirtyRows();\n\n        };\n\n        node.getData();\n        node.start();\n    }\n\n    function ErrorCtrl ($scope, $rootScope, $uibModalInstance, params) {\n        const errCtrl = this;\n        errCtrl.err = params;\n        if (params.data) {\n            if (params.data.errors.detail.indexOf('message') !== -1) {\n                const val = JSON.parse(params.data.errors.detail).message;\n                if (val.indexOf('body') !== -1) {\n                    errCtrl.err.detail = val.split('body:')[1];\n                } else {\n                    errCtrl.err.detail = val;\n                }\n            } else {\n                errCtrl.err.detail = params.data.errors.detail;\n            }\n\n        } else {\n            errCtrl.err.detail = 'Details not available';\n        }\n\n        errCtrl.Ok = function () {\n            $rootScope.$broadcast('err-node', params);\n            $uibModalInstance.close();\n        };\n    }\n\n\n\n    function NodeTagsCtrl ($scope, $rootScope, $uibModalInstance, params, $log) {\n        const ntg = this;\n        ntg.params = params;\n\n        ntg.createTag = function () {\n            if (ntg.params.tags) {\n                const tags = ntg.params.tags;\n                if (tags && tags.length > 0) {\n                    const lastTag = tags[tags.length - 1];\n                    if (lastTag.key !== undefined && lastTag.key !== '' && lastTag.key !== ' ') {\n                        const tag = {\n                            key: '',\n                            value: ''\n                        };\n                        ntg.params.tags.push(tag);\n                    }\n                } else {\n                    params.tags = [];\n                    ntg.params.tags = params.tags;\n                    const tag = {\n                        key: '',\n                        value: ''\n                    };\n                    ntg.params.tags.push(tag);\n                }\n            }\n\n        };\n\n        ntg.deleteTag = function (index) {\n            ntg.params.tags.splice(index, 1);\n        };\n\n        ntg.deleteAlltags = function () {\n            ntg.params.tags.length = 0;\n        };\n\n        ntg.save = function () {\n            if (ntg.params.isSaved) {\n                $rootScope.$broadcast('update-tags', params);\n            } else {\n                $log.log('just wait for save of node');\n            }\n            $uibModalInstance.close();\n        };\n\n        ntg.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n\n\n    angular.module('nodeControllers', []).\n    controller('NodeCtrl', NodeCtrl).\n    controller('ErrorCtrl', ErrorCtrl).\n    controller('NodeTagsCtrl', NodeTagsCtrl);\n\n    /** Inject the dependencies - avoid problems during minification **/\n    NodeCtrl.$inject = ['$scope', '$rootScope', '$state', '$uibModal', '$log', '$interval', 'uiGridConstants', '$q', 'ValidationService', 'NodeFactory', 'ModalService'];\n    ErrorCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n    NodeTagsCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params', '$log'];\n\n}());\n"]}