{"version":3,"sources":["node/nodeControllers.js"],"names":["NodeCtrl","$scope","$rootScope","$state","$uibModal","$log","$interval","uiGridConstants","$q","ValidationService","NodeFactory","ModalService","node","dataLoaded","dirty","selectedRows","WSAuth","isData","status","err","$watch","newVal","oldVal","addEditTags","row","open","updateTags","stop","selected","resource","update","selectedRow","id","tags","gridApi","start","polling","updateTimer","setTimeout","clearTimeout","query","$cancelRequest","pollData","setList","data","nodes","message","gridOptions","length","j","push","isSaved","statuses","console","log","getData","enableCellEditOnFocus","enableFiltering","rowHeight","showGridFooter","cellEditableCondition","entity","rowEditWaitInterval","name","columnDefs","displayName","field","width","cellTemplate","enableCellEdit","validators","required","ipAddress","obj","newRow","getObj","desc","vpc","ip","port","$on","event","onRegisterApi","isSelected","selection","getSelectAllState","on","rowSelectionChangedBatch","rows","params","rowEdit","getDirtyRows","ErrorCtrl","$uibModalInstance","errCtrl","detail","indexOf","val","JSON","parse","errors","Ok","split","close","lastTag","NodeTagsCtrl","ntg","tag","this","createTag","value","index","key","deleteAlltags","deleteTag","splice","save","$inject","$broadcast","cancel","dismiss","angular","module","controller"],"mappings":"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","file":"../../components/node/nodeControllers.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n\n    /**\nNode Controllers\n**/\n    function NodeCtrl ($scope, $rootScope, $state, $uibModal, $log, $interval, uiGridConstants, $q, ValidationService, NodeFactory, ModalService) {\n\n        const node = this;\n        node.dataLoaded = false;\n        node.dirty = 0;\n        node.selectedRows = [];\n        node.WSAuth = false;\n        node.isData = false;\n        node.status = false;\n        node.err = false;\n        node.tags = [];\n        node.info = '';\n\n        // Watching policy details\n        $scope.$watch('node.tags', function (newVal, oldVal) {\n            if (newVal !== oldVal) {\n                node.tags = newVal;\n            }\n        }, true);\n\n        node.addEditTags = function (row) {\n            ModalService.open('md', 'nodesTagsAddEditTpl.html', 'NodeTagsCtrl', 'ntg', row);\n        };\n\n        node.updateTags = function (row) {\n            node.stop();\n            row.selected = true;\n            node.selectedRow = row;\n            return NodeFactory.resource.update({\n                vpc: row.vpc,\n                id: row.id\n            }, {\n                status: row.status,\n                tags: row.tags\n            }, (data) => {\n                node.gridApi.selection.clearSelectedRows();\n                row.selected = false;\n                node.getData();\n                node.start();\n            }, (err) => {\n                err.row = row;\n                ModalService.open('md', 'errTpl.html', 'ErrorCtrl', 'errCtrl', err);\n                node.start();\n            });\n        };\n\n        node.polling = function () {\n            node.updateTimer = setTimeout(function () {\n                node.pollData(node.polling);\n            }, 3000);\n        };\n\n        node.start = function () {\n            clearTimeout(node.updateTimer);\n            node.polling();\n        };\n\n        node.stop = function () {\n            NodeFactory.resource.query().$cancelRequest();\n            clearTimeout(node.updateTimer);\n        };\n\n\n        node.pollData = function (polling) {\n            NodeFactory.resource.query((data) => {\n            // Keep nodes list in service to be used by DNodes\n                NodeFactory.setList(data);\n                const nodes = data.message;\n                if (nodes && nodes.length > 0) {\n                    node.isData = true;\n                    node.gridOptions.data = [];\n                    for (let j = 0; j < nodes.length; j++) {\n                        node.gridOptions.data.push(nodes[j]);\n                        node.gridOptions.data[j].isSaved = true;\n                        node.gridOptions.data[j].statuses = node.statuses;\n                    }\n                } else {\n                    node.gridOptions.data = [];\n                }\n                polling();\n            }, (err) => {\n                if (err.status === 404) {\n                    node.isData = false;\n                }\n                if (err.status !== -1) {\n                    polling();\n                }\n                console.log(err);\n            });\n        };\n\n\n        node.getData = function () {\n            NodeFactory.resource.query((data) => {\n                console.log('data ============== ');\n                console.log(data.message);\n                const nodes = data.message;\n                // Keep nodes list in service to be used by DNodes\n                NodeFactory.setList(nodes);\n                if (nodes && nodes.length > 0) {\n                    node.isData = true;\n                    node.gridOptions.data = [];\n                    for (let j = 0; j < nodes.length; j++) {\n                        node.gridOptions.data.push(nodes[j]);\n                        node.gridOptions.data[j].isSaved = true;\n                        node.gridOptions.data[j].statuses = node.statuses;\n                    }\n                } else {\n                    node.gridOptions.data = [];\n                }\n            }, (err) => {\n                if (err.status === 404) {\n                    node.isData = false;\n                }\n            });\n        };\n\n        /** Initialize gridOptions **/\n        node.gridOptions = {};\n\n        node.gridOptions = {\n            enableCellEditOnFocus: true,\n            enableFiltering: false,\n            rowHeight: 35,\n            showGridFooter: true,\n            cellEditableCondition: function (node) {\n                return !node.row.entity.isSaved; // Disable row edit for saved row\n            },\n\n            /** Disable auto-save of rows **/\n            rowEditWaitInterval: -1\n        };\n\n\n        const validators = ValidationService;\n        node.gridOptions.columnDefs = [\n            {\n                name: 'name',\n                displayName: 'NAME',\n                field: 'name',\n                width: '20%',\n                cellTemplate: 'partials/templates/nodeTpl.html',\n                enableCellEdit: true\n            },\n            {\n                name: 'id',\n                displayName: 'INSTANCE ID',\n                field: 'id',\n                width: '30%',\n                cellTemplate: 'partials/templates/nodeTpl.html',\n                enableCellEdit: true\n            },\n            {\n                name: 'ip',\n                displayName: 'IP',\n                field: 'ip',\n                width: '16%',\n                validators: {\n                    required: true,\n                    ipAddress: 'aaa.bbb.ccc.ddd'\n                },\n                cellTemplate: 'ui-grid/cellTooltipValidator',\n                enableCellEdit: true\n            },\n            {\n                name: 'vpc',\n                displayName: 'VPC ID',\n                field: 'vpc',\n                width: '20%',\n                enableCellEdit: true\n            },\n            {\n                name: 'tags',\n                displayName: 'TAGS',\n                field: 'tags',\n                width: '10%',\n                cellTemplate: 'partials/templates/nodeTagsTpl.html',\n                enableCellEdit: false\n            }\n        ];\n\n        let obj = {};\n        obj.newRow = true;\n\n        node.getObj = function () {\n            obj = {\n                status: 'offline',\n                name: ' ',\n                id: ' ',\n                ip: ' ',\n                // Port is hidden in UI but for now sending null port\n                port: 80,\n                desc: ' ',\n                vpc: ' ',\n                tags: [],\n                '': ' '\n            };\n            obj.selected = false;\n            return obj;\n        };\n\n\n        // Event handlers ================================================================\n        const updateTags = $rootScope.$on('update-tags', function (event, row) {\n            console.log('update-tags');\n            node.updateTags(row);\n        });\n\n\n        $scope.$on('$destroy', function () {\n            updateTags();\n            node.stop();\n        });\n\n        node.gridOptions.onRegisterApi = function (gridApi) {\n            node.gridApi = gridApi;\n            node.gridApi.rowEdit.on.saveRow(null, node.saveRow);\n            node.gridApi.selection.on.rowSelectionChanged(null, function (row) {\n                if (row.isSelected) {\n                    node.stop();\n                } else {\n                    node.start();\n                }\n            });\n            node.gridApi.selection.on.rowSelectionChangedBatch(null, function (rows) {\n                if (node.gridApi.selection.getSelectAllState()) {\n                    node.start();\n                } else {\n                    node.stop();\n                }\n\n            });\n\n            node.dirty = node.gridApi.rowEdit.getDirtyRows();\n\n        };\n\n        node.getData();\n        node.start();\n    }\n\n    function ErrorCtrl ($scope, $rootScope, $uibModalInstance, params) {\n        const errCtrl = this;\n        errCtrl.err = params;\n        if (params.data) {\n            if (params.data.errors.detail.indexOf('message') !== -1) {\n                const val = JSON.parse(params.data.errors.detail).message;\n                if (val.indexOf('body') !== -1) {\n                    errCtrl.err.detail = val.split('body:')[1];\n                } else {\n                    errCtrl.err.detail = val;\n                }\n            } else {\n                errCtrl.err.detail = params.data.errors.detail;\n            }\n\n        } else {\n            errCtrl.err.detail = 'Details not available';\n        }\n\n        errCtrl.Ok = function () {\n            $rootScope.$broadcast('err-node', params);\n            $uibModalInstance.close();\n        };\n    }\n\n\n\n    function NodeTagsCtrl ($scope, $rootScope, $uibModalInstance, params, $log) {\n        const ntg = this;\n        ntg.params = params;\n\n        ntg.createTag = function () {\n            if (ntg.params.tags) {\n                const tags = ntg.params.tags;\n                if (tags && tags.length > 0) {\n                    const lastTag = tags[tags.length - 1];\n                    if (lastTag.key !== undefined && lastTag.key !== '' && lastTag.key !== ' ') {\n                        const tag = {\n                            key: '',\n                            value: ''\n                        };\n                        ntg.params.tags.push(tag);\n                    }\n                } else {\n                    params.tags = [];\n                    ntg.params.tags = params.tags;\n                    const tag = {\n                        key: '',\n                        value: ''\n                    };\n                    ntg.params.tags.push(tag);\n                }\n            }\n\n        };\n\n        ntg.deleteTag = function (index) {\n            ntg.params.tags.splice(index, 1);\n        };\n\n        ntg.deleteAlltags = function () {\n            ntg.params.tags.length = 0;\n        };\n\n        ntg.save = function () {\n            if (ntg.params.isSaved) {\n                $rootScope.$broadcast('update-tags', params);\n            } else {\n                $log.log('just wait for save of node');\n            }\n            $uibModalInstance.close();\n        };\n\n        ntg.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n\n\n    angular.module('nodeControllers', []).\n    controller('NodeCtrl', NodeCtrl).\n    controller('ErrorCtrl', ErrorCtrl).\n    controller('NodeTagsCtrl', NodeTagsCtrl);\n\n    /** Inject the dependencies - avoid problems during minification **/\n    NodeCtrl.$inject = ['$scope', '$rootScope', '$state', '$uibModal', '$log', '$interval', 'uiGridConstants', '$q', 'ValidationService', 'NodeFactory', 'ModalService'];\n    ErrorCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n    NodeTagsCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params', '$log'];\n\n}());\n"]}