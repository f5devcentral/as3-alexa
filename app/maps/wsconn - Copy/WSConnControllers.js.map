{"version":3,"sources":["wsconn - Copy/WSConnControllers.js"],"names":["WSConnCtrl","$scope","$rootScope","$state","$window","$uibModal","$log","$timeout","$interval","uiGridConstants","ProxyService","ValidationService","WSConnService","ModalService","HealthService","wsconn","conn","reconnecting","updateTimer","tags","info","resource","query","data","err","console","log","pingIP","row","ip","ping","type","open","setConn","getConn","$watch","angular","bind","value","polling","setTimeout","pollData","start","clearTimeout","stop","wsResource","$cancelRequest","obj","getInfo","status","connections","name","gridOptions","isSaved","setConnection","$broadcast","getData","enableCellEditOnFocus","enableFiltering","selectionRowHeaderWidth","rowHeight","cellEditableCondition","entity","rowEditWaitInterval","onRegisterApi","gridApi","edit","on","beginCellEdit","validators","columnDefs","displayName","field","width","cellTemplate","enableCellEdit","required","portNum","dataLoaded","getObj","port","selected","addRow","cancelRow","length","splice","cancelAll","Object","keys","isRowFilled","key","saveRow","$save","delConnect","delSelectedConn","delete","deleteRow","addEditTags","updateTags","update","updateProxyTags","$on","event","loggedOut","delConn","successConn","errConn","params","PingConnCtrl","$uibModalInstance","pingCtrl","detail","Ok","close","SuccessConnCtrl","successCtrl","ErrorConnCtrl","errCtrl","errors","indexOf","val","JSON","parse","message","split","location","reload","DelConnCtrl","Cancel","dismiss","ProxyTagsCtrl","ptg","createTag","lastTag","undefined","tag","push","deleteTag","index","deleteAlltags","save","cancel","module","controller","$inject"],"mappings":"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","file":"../../components/wsconn - Copy/WSConnControllers.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n\n  function WSConnCtrl ($scope, $rootScope, $state, $window, $uibModal, $log, $timeout, $interval, uiGridConstants, ProxyService, ValidationService, WSConnService, ModalService, HealthService) {\n\n    const wsconn = this;\n    wsconn.conn = {};\n    wsconn.reconnecting = false;\n    wsconn.updateTimer;\n    wsconn.tags = [];\n    wsconn.info = '';\n\n    ProxyService.resource.query((data) => {\n      wsconn.info = data;\n    }, (err) => {\n      console.log(err);\n    });\n\n    wsconn.pingIP = function (row) {\n      if (row.ip) { // Ping connection\n        HealthService.resource.ping({\n          type: 'ping',\n          ip: row.ip\n        }, {}, function (data) {\n          ModalService.open('md', 'pingConnTpl.html', 'PingConnCtrl', 'pingCtrl', data);\n        }, function (err) {\n          ModalService.open('md', 'errorConnectionTpl.html', 'ErrorConnCtrl', 'errCtrl', err);\n        });\n      }\n    };\n\n    wsconn.setConn = function (row) {\n      wsconn.conn = row;\n    };\n\n    wsconn.getConn = function () {\n      return wsconn.conn;\n    };\n\n    $scope.$watch(angular.bind(wsconn, function () {\n      return wsconn.reconnecting;\n    }), function (value) {\n      console.log(`reconnecting change to${value}`);\n    });\n\n    wsconn.polling = function () {\n      wsconn.updateTimer = setTimeout(function () {\n        wsconn.pollData(wsconn.polling);\n      }, 3000);\n    };\n\n    wsconn.start = function () {\n      clearTimeout(wsconn.updateTimer);\n      wsconn.polling();\n    };\n\n    wsconn.stop = function () {\n      WSConnService.wsResource.query().$cancelRequest();\n      clearTimeout(wsconn.updateTimer);\n    };\n\n    /** Get data from Server **/\n    wsconn.pollData = function (polling) {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        WSConnService.wsResource.query((data) => {\n          if (data.connections[0].name !== ' ') {\n            wsconn.gridOptions.data = data.connections;\n            wsconn.gridOptions.data[0].isSaved = true;\n            wsconn.gridOptions.data[0].tags = data.connections[0].tags;\n\n            if (wsconn.gridOptions.data[0].status === 'authorized' || wsconn.gridOptions.data[0].status === 'connected_not_authorized') {\n              wsconn.reconnecting = false;\n              WSConnService.setConnection(true);\n            }\n\n            if (wsconn.gridOptions.data[0].status === 'authorized') {\n              $rootScope.$broadcast('ws-auth');\n            }\n            if (wsconn.gridOptions.data[0].status === 'reconnecting') {\n              wsconn.reconnecting = true;\n            }\n\n          } else {\n            wsconn.reconnecting = false;\n            // There is no wsconn - Refresh table\n            $rootScope.$broadcast('ws-not-auth');\n            wsconn.gridOptions.data = [];\n\n          }\n\n          polling();\n\n        }, (err) => {\n          ModalService.open('md', 'errorConnectionTpl.html', 'ErrorConnCtrl', 'errCtrl', err);\n          if (err.status !== -1) {\n            polling();\n          }\n          console.log(err);\n        });\n      } else {\n        polling();\n      }\n    };\n\n    /** Get data from Server **/\n    wsconn.getData = function () {\n      const obj = ProxyService.getInfo();\n      if (obj && obj.status === 'complete') {\n        WSConnService.wsResource.query((data) => {\n          if (data.connections[0].name !== ' ') {\n            wsconn.gridOptions.data = data.connections;\n            wsconn.gridOptions.data[0].isSaved = true;\n            wsconn.gridOptions.data[0].tags = data.connections[0].tags;\n\n            if (wsconn.gridOptions.data[0].status === 'authorized' || wsconn.gridOptions.data[0].status === 'connected_not_authorized') {\n              wsconn.reconnecting = false;\n              WSConnService.setConnection(true);\n            }\n\n            if (wsconn.gridOptions.data[0].status === 'authorized') {\n              $rootScope.$broadcast('ws-auth');\n            }\n            if (wsconn.gridOptions.data[0].status === 'reconnecting') {\n              wsconn.reconnecting = true;\n            }\n\n          } else {\n            wsconn.reconnecting = false;\n            $rootScope.$broadcast('ws-not-auth');\n            wsconn.gridOptions.data = [];\n\n          }\n\n        }, (err) => {\n          console.log(err);\n        });\n      }\n    };\n\n    wsconn.gridOptions = {};\n\n    wsconn.gridOptions = {\n      enableCellEditOnFocus: true,\n      enableFiltering: false,\n      selectionRowHeaderWidth: 35,\n      rowHeight: 35,\n      cellEditableCondition: function (wsconn) {\n        return !wsconn.row.entity.isSaved; // Disable row edit for saved row\n      },\n\n      rowEditWaitInterval: -1\n    };\n\n    wsconn.gridOptions.onRegisterApi = function (gridApi) {\n\n      wsconn.gridApi = gridApi;\n      wsconn.gridApi.edit.on.beginCellEdit(null, function () {\n        wsconn.stop();\n      });\n\n\n    };\n\n    const validators = ValidationService;\n    wsconn.gridOptions.columnDefs = [\n      {\n        name: 'status',\n        displayName: 'STATUS',\n        field: 'status',\n        width: '10%',\n        cellTemplate: 'partials/templates/wsconnStatusTemplate.html',\n        enableCellEdit: false\n      },\n      {\n        name: 'name',\n        displayName: 'NAME',\n        field: 'name',\n        width: '36%',\n        enableCellEdit: true\n      },\n      {\n        name: 'ip',\n        displayName: 'IP / FQDN',\n        field: 'ip',\n        width: '23%',\n        cellTemplate: 'ui-grid/cellTooltipValidator',\n        enableCellEdit: true\n      },\n      {\n        name: 'port',\n        displayName: 'PORT',\n        field: 'port',\n        type: 'number',\n        width: '10%',\n        validators: {\n          required: true,\n          portNum: ' '\n        },\n        cellTemplate: 'ui-grid/cellTooltipValidator',\n        enableCellEdit: true\n      },\n      {\n        name: 'tags',\n        displayName: 'TAGS',\n        field: 'tags',\n        width: '10%',\n        cellTemplate: 'partials/templates/proxyTagsTpl.html',\n        enableCellEdit: false\n      },\n      {\n        name: ' ',\n        width: '10%',\n        cellTemplate: 'partials/templates/wsconnStatsTemplate.html',\n        enableCellEdit: false\n      }\n    ];\n\n    wsconn.dataLoaded = false;\n\n    let obj = {};\n\n\n    wsconn.getObj = function () {\n      obj = {\n        status: 'not_connected',\n        name: ' ',\n        ip: ' ',\n        port: ' ',\n        tags: [],\n        '': ' '\n      };\n      obj.selected = false;\n      return obj;\n    };\n\n    wsconn.addRow = function () {\n      wsconn.stop();\n      wsconn.reconnecting = false;\n\n      WSConnService.addRow(wsconn.gridOptions.data, wsconn.getObj());\n\n    };\n\n\n    wsconn.cancelRow = function () {\n      if (wsconn.gridOptions.data.length > 0) {\n        wsconn.gridOptions.data.splice(0, 1);\n        wsconn.reconnecting = false;\n        wsconn.start();\n      }\n    };\n\n    wsconn.cancelAll = function () {\n      const row = wsconn.getConn();\n      if (Object.keys(row).length) {\n\n        ModalService.open('md', 'delConnectConfirmTpl.html', 'DelConnCtrl', 'delConn', row);\n        wsconn.reconnecting = false;\n\n      } else {\n        const data = wsconn.gridOptions.data[0];\n        const row = {\n          ip: data.ip,\n          port: data.port\n        };\n        ModalService.open('md', 'delConnectConfirmTpl.html', 'DelConnCtrl', 'delConn', row);\n        wsconn.reconnecting = false;\n      }\n      wsconn.start();\n      return;\n\n    };\n\n    wsconn.isRowFilled = function (row) {\n      for (const key in row) {\n        if ((row[key] === ' ' || row[key] === '' || row[key] === null) && key !== '') {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    wsconn.saveRow = function (data, row) {\n      wsconn.stop();\n      wsconn.setConn(row);\n      row.selected = true;\n\n      if (row.name !== ' ' && row.name !== '' && row.ip !== ' ' && row.ip !== '' && row.port !== ' ' && row.port !== '') {\n\n        const conn = new WSConnService.wsResource(row);\n        return conn.$save(function (data) {\n\n          row.selected = false;\n          wsconn.getData();\n          wsconn.start();\n          $rootScope.$broadcast('wsconn-added');\n          ModalService.open('sm', 'successConnectionTpl.html', 'SuccessConnCtrl', 'successCtrl', data);\n        }, function (err) {\n          $log.log(err);\n          err.row = row;\n          row.selected = false;\n          ModalService.open('md', 'errorConnectionTpl.html', 'ErrorConnCtrl', 'errCtrl', err);\n          wsconn.start();\n        });\n      }\n      wsconn.start();\n      return;\n\n\n    };\n\n\n    wsconn.delConnect = function (row) {\n      ModalService.open('md', 'delConnectConfirmTpl.html', 'DelConnCtrl', 'delConn', row);\n    };\n\n\n    wsconn.delSelectedConn = function (row) {\n      wsconn.stop();\n      row.selected = true;\n      WSConnService.wsResource.delete({\n        ip: row.ip,\n        port: row.port\n      }, {}, (data) => {\n        WSConnService.deleteRow(wsconn.gridOptions.data, row);\n        wsconn.cancelRow();\n        wsconn.getData();\n        wsconn.start();\n        WSConnService.setConnection(false);\n      }, (err) => {\n        ModalService.open('md', 'errorConnectionTpl.html', 'ErrorConnCtrl', 'errCtrl', err);\n        console.log(err);\n        wsconn.start();\n      });\n    };\n\n\n    wsconn.addEditTags = function (row) {\n      ModalService.open('md', 'proxyTagsAddEditTpl.html', 'ProxyTagsCtrl', 'ptg', row);\n    };\n\n    wsconn.updateTags = function (row) {\n      wsconn.stop();\n      row.selected = true;\n      WSConnService.wsResource.update({\n        ip: row.ip,\n        port: row.port\n      }, {\n        tags: row.tags\n      }, (data) => {\n        wsconn.getData();\n        wsconn.start();\n      }, (err) => {\n        ModalService.open('md', 'errorConnectionTpl.html', 'ErrorConnCtrl', 'errCtrl', err);\n        $log.log(err);\n        wsconn.start();\n      });\n\n    };\n\n    // Event Listeners ====================================================================\n    const updateProxyTags = $rootScope.$on('update-proxy-tags', function (event, row) {\n      wsconn.updateTags(row);\n    });\n\n    const loggedOut = $rootScope.$on('logged-out', function () {\n      wsconn.stop();\n    });\n\n\n    const delConn = $rootScope.$on('delConn', function (event, row) {\n      wsconn.delSelectedConn(row);\n    });\n\n    const successConn = $rootScope.$on('success-wsconn', function () {\n      wsconn.getData();\n      wsconn.start();\n      wsconn.gridOptions.data[0].selected = false;\n    });\n\n    const errConn = $rootScope.$on('err-wsconn', function (event, params) {\n      params.row.selected = false;\n    });\n\n    $scope.$on('$destroy', function () {\n      updateProxyTags();\n      wsconn.stop();\n      loggedOut();\n      delConn();\n      successConn();\n      errConn();\n    });\n\n    wsconn.getData();\n    wsconn.start();\n\n  }\n\n  /** Ctrl to Ping Connection **/\n  function PingConnCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const pingCtrl = this;\n    pingCtrl.data = params.detail;\n    pingCtrl.Ok = function () {\n      $uibModalInstance.close();\n    };\n  }\n\n\n  /** Controller for Successful Websocket connection Template **/\n  function SuccessConnCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const successCtrl = this;\n    successCtrl.data = params.data;\n    successCtrl.Ok = function () {\n      $rootScope.$broadcast('success-wsconn');\n      $uibModalInstance.close();\n    };\n  }\n\n\n  /** Controller for Error in Websocket connection Template **/\n  function ErrorConnCtrl ($scope, $rootScope, $window, $uibModalInstance, params) {\n    const errCtrl = this;\n    errCtrl.err = params;\n    if (params.data) {\n      if (params.data.errors.detail.indexOf('message') !== -1) {\n        const val = JSON.parse(params.data.errors.detail).message;\n        if (val.indexOf('body') !== -1) {\n          errCtrl.err.detail = val.split('body:')[1];\n        } else {\n          errCtrl.err.detail = val;\n        }\n      } else {\n        errCtrl.err.detail = params.data.errors.detail;\n      }\n\n    } else {\n      errCtrl.err.detail = 'Details not available';\n    }\n    errCtrl.Ok = function () {\n      if (params.status === -1) {\n        $rootScope.$broadcast('err-wsconn', params);\n        setTimeout(function () {\n          $window.location.reload();\n        }, 5000);\n      }\n      $uibModalInstance.close();\n    };\n  }\n\n\n  function DelConnCtrl ($scope, $rootScope, $uibModalInstance, params) {\n    const delConn = this;\n    delConn.Ok = function () {\n      $rootScope.$broadcast('delConn', params);\n      $uibModalInstance.close();\n    };\n\n    delConn.Cancel = function () {\n      $uibModalInstance.dismiss('cancel');\n    };\n  }\n\n\n  function ProxyTagsCtrl ($scope, $rootScope, $uibModalInstance, params, $log) {\n    const ptg = this;\n    ptg.params = params;\n    ptg.createTag = function () {\n      if (ptg.params.tags) {\n        const tags = ptg.params.tags;\n        if (tags && tags.length > 0) {\n          const lastTag = tags[tags.length - 1];\n          if (lastTag.key !== undefined && lastTag.key !== '' && lastTag.key !== ' ') {\n            const tag = {\n              key: '',\n              value: ''\n            };\n            ptg.params.tags.push(tag);\n          }\n        } else {\n          params.tags = [];\n          ptg.params.tags = params.tags;\n          const tag = {\n            key: '',\n            value: ''\n          };\n          ptg.params.tags.push(tag);\n        }\n      }\n\n    };\n\n    ptg.deleteTag = function (index) {\n      ptg.params.tags.splice(index, 1);\n    };\n\n    ptg.deleteAlltags = function () {\n      ptg.params.tags.length = 0;\n    };\n\n    ptg.save = function () {\n      if (ptg.params.isSaved) {\n        $rootScope.$broadcast('update-proxy-tags', params);\n      } else {\n        $log.log('just wait for save of proxy connection');\n      }\n      $uibModalInstance.close();\n    };\n\n    ptg.cancel = function () {\n      $uibModalInstance.dismiss('cancel');\n    };\n  }\n\n\n  angular.module('WSConnControllers', []).\n    controller('WSConnCtrl', WSConnCtrl).\n    controller('SuccessConnCtrl', SuccessConnCtrl).\n    controller('ErrorConnCtrl', ErrorConnCtrl).\n    controller('DelConnCtrl', DelConnCtrl).\n    controller('PingConnCtrl', PingConnCtrl).\n    controller('ProxyTagsCtrl', ProxyTagsCtrl);\n\n\n  /** Inject the dependencies - avoid problems during minification **/\n  WSConnCtrl.$inject = ['$scope', '$rootScope', '$state', '$window', '$uibModal', '$log', '$timeout', '$interval', 'uiGridConstants', 'ProxyService', 'ValidationService', 'WSConnService', 'ModalService', 'HealthService'];\n  SuccessConnCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  ErrorConnCtrl.$inject = ['$scope', '$rootScope', '$window', '$uibModalInstance', 'params'];\n  DelConnCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  PingConnCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params'];\n  ProxyTagsCtrl.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'params', '$log'];\n\n}());\n"]}