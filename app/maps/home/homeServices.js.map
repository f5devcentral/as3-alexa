{"version":3,"sources":["home/homeServices.js"],"names":["angular","module","$resource","GraphService","graph","data","tenants","message","processData","res","nodes","push","id","group","i","length","bigipLink","source","name","target","applications","k","type","appLink","links","services","m","status","serviceLink","poolMembers","pool","p","virtualServers","vsLink","poolLink","q","ip","memberLink","query","console","log","graphResource","list","headers","Authorization","method","isArray","window","btoa","factory"],"mappings":"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","file":"../../components/home/homeServices.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function() {\n    angular.module('homeServices', []).\n    factory('GraphService', GraphService);\n\n    function GraphService($resource) {\n\n        const graph = {};\n\n        // Process Graph data\n\n        graph.processData = (data) => {\n            const tenants = data.message.tenants;\n            const res = {\n                nodes: [],\n                links: []\n            };\n\n            // For now manually adding BIG IP\n            res.nodes.push({\n                id: 'BIG IP',\n                group: 50,\n                type: 'bigip',\n                status: 'online'\n            });\n\n            // Create links between Big IP and tenants\n            for (let i = 0; i < tenants.length; i++) {\n                res.nodes.push({\n                    id: tenants[i].name,\n                    group: 40,\n                    type: 'tenant',\n                    status: 'online' // All tenants show 'online' status\n                });\n\n                // Create links between Big IP and proxies\n                const bigipLink = {\n                    source: 'BIG IP',\n                    target: tenants[i].name\n                };\n                res.links.push(bigipLink);\n\n\n                const applications = tenants[i].applications;\n                for (let k = 0; k < applications.length; k++) {\n                    res.nodes.push({\n                        id: `${tenants[i].name}/${applications[k].name}`,\n                        group: 30,\n                        type: 'application',\n                        status: 'online' // All applications show 'online' status\n                    });\n\n                    // Create links between Tenant and applications\n                    const appLink = {\n                        source: tenants[i].name,\n                        target: `${tenants[i].name}/${applications[k].name}`\n                    };\n                    res.links.push(appLink);\n\n\n                    const services = applications[k].services;\n                    for (let m = 0; m < services.length; m++) {\n\n                        res.nodes.push({\n                            id: `${tenants[i].name}/${applications[k].name}/${services[m].name}`,\n                            group: 20,\n                            type: 'service',\n                            status: 'online' // All applications show 'online' status\n                        });\n\n\n                        // Create links between Application and Service\n                        const serviceLink = {\n                            source: `${tenants[i].name}/${applications[k].name}`,\n                            target: `${tenants[i].name}/${applications[k].name}/${services[m].name}`\n                        };\n                        res.links.push(serviceLink);\n\n\n\n\n                        // Build Virtual Server and Pool Members\n                        const virtualServers = services[m].virtualServers;\n                        const pool = services[m].pool;\n                        let poolMembers = '';\n                        if(pool) {\n                            poolMembers = services[m].pool.poolMembers;\n                        }\n\n                        // Add pool node\n                        if (pool) {\n                            res.nodes.push({\n                                id: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${pool.name}`,\n                                group: 10,\n                                type: 'pool',\n                                status: 'online' // All pool show 'online' status\n                            });\n                        }\n\n                        for (let p = 0; p < virtualServers.length; p++) {\n                            res.nodes.push({\n                                id: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${virtualServers[p].name}`,\n                                group: 15,\n                                type: 'virtualServer',\n                                status: 'online' // All virtual show 'online' status\n                            });\n\n                            // Create links between Service and Virtual Server\n                            const vsLink = {\n                                source: `${tenants[i].name}/${applications[k].name}/${services[m].name}`,\n                                target: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${virtualServers[p].name}`\n                            };\n                            res.links.push(vsLink);\n\n                            // Build link between virtual servers and pool\n                            if(pool) {\n                                const poolLink = {\n                                    source: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${pool.name}`,\n                                    target: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${virtualServers[p].name}`\n                                };\n                                res.links.push(poolLink);\n                            }\n                        }\n                        if (poolMembers && poolMembers.length > 0) {\n                            for (let q = 0; q < poolMembers.length; q++) {\n                                res.nodes.push({\n                                    id: poolMembers[q].name + q,\n                                    group: 5,\n                                    type: 'poolMember',\n                                    status: poolMembers[q].status, // Pool Member show 'online' status for now\n                                    ip: poolMembers[q].name\n                                });\n\n                                // Create links between Pool and Pool Members\n                                const memberLink = {\n                                    source: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${pool.name}`,\n                                    target: poolMembers[q].name + q\n                                };\n                                res.links.push(memberLink);\n\n                            }\n                        }\n                    }\n                }\n            }\n            console.log('res ======================== ');\n            console.log(res);\n            return { list: [res] };\n        };\n\n        //graph.graphResource = $resource('data/rawGraph.json', {}, {\n        graph.graphResource = $resource('https://6e3tjgtl1a.execute-api.us-west-2.amazonaws.com/default/as3Services', {}, {\n            query: {\n                method: 'GET',\n                isArray: false\n            },\n            headers: { Authorization: `Basic ${window.btoa(`${'admin'}:${'admin'}`)}` }\n\n        });\n\n        return graph;\n    }\n\n}());"]}