{"version":3,"sources":["home/homeServices.js"],"names":["angular","module","$resource","GraphService","graph","data","processData","message","tenants","res","nodes","push","id","group","type","i","length","name","status","schema","bigipLink","source","links","applications","k","appLink","target","services","m","serviceLink","pool","virtualServers","poolMembers","p","vsLink","poolLink","q","ip","memberLink","query","list","graphResource","headers","method","isArray","factory"],"mappings":"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","file":"../../components/home/homeServices.js","sourcesContent":["/**\n * Copyright (c) 2018, F5 Networks, Inc. \n */\n\n(function() {\n    angular.module('homeServices', []).\n    factory('GraphService', GraphService);\n\n    function GraphService($resource) {\n\n        const graph = {};\n\n\n        graph.processData = (data) => {\n            const tenants = data.message.tenants;\n            const res = {\n                nodes: [],\n                links: []\n            };\n\n            // For now manually adding BIG IP\n            res.nodes.push({\n                id: 'BIG IP',\n                group: 50,\n                type: 'bigip',\n                status: 'online'\n            });\n\n            // Create links between Big IP and tenants\n            for (let i = 0; i < tenants.length; i++) {\n                res.nodes.push({\n                    id: tenants[i].name,\n                    group: 40,\n                    type: 'tenant',\n                    status: 'online', // All tenants show 'online' status,\n                    schema: tenants[i].schema\n                });\n\n                // Create links between Big IP and proxies\n                const bigipLink = {\n                    source: 'BIG IP',\n                    target: tenants[i].name\n                };\n                res.links.push(bigipLink);\n\n\n                const applications = tenants[i].applications;\n                for (let k = 0; k < applications.length; k++) {\n                    res.nodes.push({\n                        id: `${tenants[i].name}/${applications[k].name}`,\n                        group: 30,\n                        type: 'application',\n                        status: 'online', // All applications show 'online' status\n                        schema: applications[k].schema\n                    });\n\n                    // Create links between Tenant and applications\n                    const appLink = {\n                        source: tenants[i].name,\n                        target: `${tenants[i].name}/${applications[k].name}`\n                    };\n                    res.links.push(appLink);\n\n\n                    const services = applications[k].services;\n                    for (let m = 0; m < services.length; m++) {\n\n                        res.nodes.push({\n                            id: `${tenants[i].name}/${applications[k].name}/${services[m].name}`,\n                            group: 20,\n                            type: 'service',\n                            status: 'online', // All applications show 'online' status\n                            schema: services[m].schema\n                        });\n\n\n                        // Create links between Application and Service\n                        const serviceLink = {\n                            source: `${tenants[i].name}/${applications[k].name}`,\n                            target: `${tenants[i].name}/${applications[k].name}/${services[m].name}`\n                        };\n                        res.links.push(serviceLink);\n\n\n                        // Build Virtual Server and Pool Members\n                        const virtualServers = services[m].virtualServers;\n                        const pool = services[m].pool;\n                        let poolMembers = '';\n                        if(pool) {\n                            poolMembers = services[m].pool.poolMembers;\n                        }\n\n                        // Add pool node\n                        if (pool) {\n                            res.nodes.push({\n                                id: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${pool.name}`,\n                                group: 10,\n                                type: 'pool',\n                                status: 'online', // All pool show 'online' status\n                                schema: pool.schema\n                            });\n                        }\n\n                        for (let p = 0; p < virtualServers.length; p++) {\n                            res.nodes.push({\n                                id: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${virtualServers[p].name}`,\n                                group: 15,\n                                type: 'virtualServer',\n                                status: 'online', // All virtual show 'online' status\n                                schema: virtualServers[p].schema\n                            });\n\n                            // Create links between Service and Virtual Server\n                            const vsLink = {\n                                source: `${tenants[i].name}/${applications[k].name}/${services[m].name}`,\n                                target: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${virtualServers[p].name}`\n                            };\n                            res.links.push(vsLink);\n\n                            // Build link between virtual servers and pool\n                            if(pool) {\n                                const poolLink = {\n                                    source: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${pool.name}`,\n                                    target: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${virtualServers[p].name}`\n                                };\n                                res.links.push(poolLink);\n                            }\n                        }\n                        if (poolMembers && poolMembers.length > 0) {\n                            for (let q = 0; q < poolMembers.length; q++) {\n                                res.nodes.push({\n                                    id: poolMembers[q].name + q,\n                                    group: 5,\n                                    type: 'poolMember',\n                                    status: poolMembers[q].status, // Pool Member show 'online' status for now\n                                    ip: poolMembers[q].name,\n                                    schema: poolMembers[q].schema\n                                });\n\n                                // Create links between Pool and Pool Members\n                                const memberLink = {\n                                    source: `${tenants[i].name}/${applications[k].name}/${services[m].name}/${pool.name}`,\n                                    target: poolMembers[q].name + q\n                                };\n                                res.links.push(memberLink);\n\n                            }\n                        }\n                    }\n                }\n            }\n\n            return { list: [res] };\n        };\n\n        graph.graphResource = $resource('https://6e3tjgtl1a.execute-api.us-west-2.amazonaws.com/default/as3Services', {}, {\n            query: {\n                method: 'GET',\n                isArray: false\n            },\n            headers: { Authorization: `Basic ${window.btoa(`${'admin'}:${'admin'}`)}` }\n\n        });\n\n        return graph;\n    }\n\n}());"]}