{"version":3,"sources":["home/homeControllers.js"],"names":["GraphCtrl","$scope","$log","$timeout","$interval","$q","uiGridConstants","GraphService","graph","this","inLimit","updateTimer","tmp","nodes","id","group","type","status","links","polling","setTimeout","pollData","start","clearTimeout","console","log","stop","graphResource","query","data","message","tenants","graphData","processData","list","angular","equals","latestGraph","newData","copy","updateGraph","err","indexOf","oData","module","$inject","HomeCtrl","app","stats","nodeDiscovery","controller"],"mappings":"AAAA,cAKC,WAYG,SAASA,EAAWC,EAAQC,EAAMC,EAAUC,EAAWC,EAAIC,EAAiBC,GACxE,IAAMC,EAAQC,KACdD,EAAME,SAAU,EAChBF,EAAMG,YAEN,IAAMC,EAAM,CACRC,MAAO,CAAC,CACJC,GAAI,SACJC,MAAO,GACPC,KAAM,QACNC,OAAQ,WAEZC,MAAO,IAEXV,EAAMW,QAAU,WACZX,EAAMG,YAAcS,WAAW,WAC3BZ,EAAMa,SAASb,EAAMW,UACtB,MAGPX,EAAMc,MAAQ,WACVC,aAAaf,EAAMG,aACnBH,EAAMW,UACNK,QAAQC,IAAI,0BAGhBjB,EAAMkB,KAAO,WACTH,aAAaf,EAAMG,aACnBa,QAAQC,IAAI,yBAGhBjB,EAAMa,SAAW,SAAUF,GACvBZ,EAAaoB,cAAcC,MAAM,SAAAC,GAC7B,GAAIA,EAAKC,QAAQC,QAAS,CACtB,IAAMC,EAAYzB,EAAa0B,YAAYJ,GAC3C,GAAIG,EAAUE,KAAK,GAAI,CACnB,GAAIC,QAAQC,OAAOJ,EAAUE,KAAK,GAAI1B,EAAM6B,eACxC7B,EAAME,SAAU,MACb,CACH,IAAM4B,EAAUH,QAAQI,KAAKP,EAAUE,KAAK,IAC5C1B,EAAMgC,YAAYF,GAClB9B,EAAMqB,KAAOG,EAAUE,KAAK,GAC5B1B,EAAME,SAAU,EAEpBS,SAEAX,EAAMgC,YAAY5B,GAClBJ,EAAMqB,KAAOjB,EACbJ,EAAME,SAAU,EAChBS,SAGJX,EAAMgC,YAAY5B,GAClBJ,EAAMqB,KAAOjB,EACbJ,EAAME,SAAU,EAChBS,KAEL,SAAAsB,GACCjB,QAAQC,IAAIgB,GACZjC,EAAMgC,YAAY5B,GAClBJ,EAAMqB,KAAOjB,EACM,MAAf6B,EAAIxB,QAAkBwB,EAAIZ,KAAKC,SAAWW,EAAIZ,KAAKC,QAAQY,QAAQ,wBACnElC,EAAME,SAAU,EAEhBF,EAAME,SAAU,EAEpBS,OAKRX,EACID,QAAAA,WAAAA,EACauB,cAAQC,MAAS,SAAAF,GAA1B,GACIA,EAAMG,QAAAA,QAAYzB,CAClB,IAAIyB,EAAUE,EAASD,YAAAJ,GAAvB,GACIG,EAAIG,KAAQC,GAAZ,GACI5B,QAAME,OAAAA,EAAUwB,KAAA1B,EAAA6B,eAAhB7B,EACGE,SAAA,MACH,CACAF,IAAMgC,EAAAA,QAAYF,KAAAA,EAAAA,KAAAA,IAClB9B,EAAMqB,YAAOG,GACbxB,EAAME,KAAAA,EAAUwB,KAAA,GAAhB1B,EAAME,SAAU,OAIpBF,EAAMqB,YAAOjB,GACbJ,EAAME,KAAAA,EAANF,EAAME,SAAU,OAIpBF,EAAMqB,YAAOjB,GACbJ,EAAME,KAAAA,EAANF,EAAME,SAAU,GAErB,SACCc,GACAhB,QAAMgC,IAAAA,GACNhC,EAAMqB,YAAOjB,GACbJ,EAAIiC,KAAIxB,EACEP,MAANF,EAAAA,QAAgBiC,EAAAZ,KAAAC,SAAAW,EAAAZ,KAAAC,QAAAY,QAAA,wBAAhBlC,EACGE,SAAA,EACHF,EAAME,SAAU,KAK5BF,EACIA,YAAcqB,SAAAA,GAAdrB,EAAMmC,MAAQd,GAGlBrB,EACI6B,YAAaM,WAAb,OAAOnC,EAAMmC,OAGjB1C,EACIO,IAAMkB,WAAAA,WAANlB,EAAMkB,SAIVlB,EAAMc,UAANd,EAAMc,QAQVa,QAAQS,OAAO,kBAAmB,IAMlC5C,WAAU6C,WA7IV,WAAA,IAASC,EAAAA,KACLC,EAAMA,MAAM,GACZA,EAAIC,eAAQ,EACZD,EAAIE,QAAAA,KAsIRC,WA7IJ,YAAAlD,GA8IIkD,WAAW,WAPX,cAUAlD,EAAU6C,QAAU,CAAC,SAAU,OAAQ,WAAY,YAAa,KAAM,kBAAmB,gBAjJ5F","file":"../../components/home/homeControllers.js","sourcesContent":["/**\n * Copyright (c) 2018, F5 Networks, Inc. \n */\n\n \n(function () {\n    /**\nHome Controllers - Base Controllers for Home Page\n**/\n    function HomeCtrl () {\n        const app = this;\n        app.stats = {};\n        app.nodeDiscovery = false;\n        app.message = '';\n\n    }\n\n    function GraphCtrl ($scope, $log, $timeout, $interval, $q, uiGridConstants, GraphService) {\n        const graph = this;\n        graph.inLimit = true;\n        graph.updateTimer;\n\n        const tmp = {\n            nodes: [{\n                id: 'BIG IP',\n                group: 50,\n                type: 'bigip',\n                status: 'online'\n            }],\n            links: []\n        };\n        graph.polling = function () {\n            graph.updateTimer = setTimeout(function () {\n                graph.pollData(graph.polling);\n            }, 3000);\n        };\n\n        graph.start = function () {\n            clearTimeout(graph.updateTimer);\n            graph.polling();\n            console.log('graph start - polling');\n        };\n\n        graph.stop = function () {\n            clearTimeout(graph.updateTimer);\n            console.log('graph stop - polling');\n        };\n\n        graph.pollData = function (polling) {\n            GraphService.graphResource.query((data) => {\n                if (data.message.tenants) {\n                    const graphData = GraphService.processData(data);\n                    if (graphData.list[0]) {\n                        if (angular.equals(graphData.list[0], graph.latestGraph())) {\n                            graph.inLimit = true;\n                        } else {\n                            const newData = angular.copy(graphData.list[0]);\n                            graph.updateGraph(newData);\n                            graph.data = graphData.list[0];\n                            graph.inLimit = true;\n                        }\n                        polling();\n                    } else {\n                        graph.updateGraph(tmp);\n                        graph.data = tmp;\n                        graph.inLimit = false;\n                        polling();\n                    }\n                } else {\n                    graph.updateGraph(tmp);\n                    graph.data = tmp;\n                    graph.inLimit = true;\n                    polling();\n                }\n            }, (err) => {\n                console.log(err);\n                graph.updateGraph(tmp);\n                graph.data = tmp;\n                if (err.status === 403 && err.data.message && err.data.message.indexOf('Dataset is too large')) {\n                    graph.inLimit = false;\n                } else {\n                    graph.inLimit = true;\n                }\n                polling();\n            });\n        };\n\n\n        graph.getData = function () {\n            GraphService.graphResource.query((data) => {\n                if (data.message.tenants) {\n                    const graphData = GraphService.processData(data);\n                    if (graphData.list[0]) {\n                        if (angular.equals(graphData.list, graph.latestGraph())) {\n                            graph.inLimit = true;\n                        } else {\n                            const newData = angular.copy(graphData.list[0]);\n                            graph.updateGraph(newData);\n                            graph.data = graphData.list[0];\n                            graph.inLimit = true;\n                        }\n                    } else {\n                        graph.updateGraph(tmp);\n                        graph.data = tmp;\n                        graph.inLimit = false;\n                    }\n                } else {\n                    graph.updateGraph(tmp);\n                    graph.data = tmp;\n                    graph.inLimit = true;\n                }\n            }, (err) => {\n                console.log(err);\n                graph.updateGraph(tmp);\n                graph.data = tmp;\n                if (err.status === 403 && err.data.message && err.data.message.indexOf('Dataset is too large')) {\n                    graph.inLimit = false;\n                } else {\n                    graph.inLimit = true;\n                }\n            });\n        };\n\n        graph.updateGraph = function (data) {\n            graph.oData = data;\n        };\n\n        graph.latestGraph = function () {\n            return graph.oData;\n        };\n\n        $scope.$on('$destroy', function () {\n            graph.stop();\n        });\n\n        graph.getData();\n        graph.start();\n\n    }\n\n    function HelpCtrl () {\n        const help = this;\n    }\n\n    angular.module('homeControllers', []).\n    controller('HomeCtrl', HomeCtrl).\n    controller('GraphCtrl', GraphCtrl).\n    controller('HelpCtrl', HelpCtrl);\n\n    /** Inject the dependencies - avoid problems during minification **/\n    GraphCtrl.$inject = ['$scope', '$log', '$timeout', '$interval', '$q', 'uiGridConstants', 'GraphService'];\n}());\n"]}