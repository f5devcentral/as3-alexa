{"version":3,"sources":["home/homeControllers.js"],"names":["GraphCtrl","$scope","$log","$timeout","$interval","$q","uiGridConstants","GraphService","graph","inLimit","tmp","nodes","id","group","type","links","polling","setTimeout","updateTimer","start","clearTimeout","stop","pollData","graphResource","data","query","graphData","processData","list","latestGraph","angular","newData","copy","updateGraph","err","console","log","status","getData","message","tenants","equals","indexOf","oData","$on","module","controller","app","this","stats","HomeCtrl","$inject"],"mappings":"AAAA,cAMC,WAaG,SAASA,EAAWC,EAAQC,EAAMC,EAAUC,EAAWC,EAAIC,EAAiBC,GAA5E,IAASP,EAAAA,KACLQ,EAAMA,SAAQ,EACdA,EAAMC,YAGN,IAAMC,EAAM,CAANA,MAAM,CAAA,CACRC,GAAQ,SACJC,MAAI,GACJC,KAAAA,QACAC,OAAM,WAGVC,MAAO,IAEXP,EAAMQ,QAAU,WAAhBR,EAAMQ,YAAUC,WAAY,WACxBT,EAAMU,SAAAA,EAAcD,UAEjB,MAGPT,EAAMW,MAAQ,WAAdX,aAAcA,EAAAU,aACVE,EAAAA,UACAZ,QAAMQ,IAAAA,0BAIVR,EAAMa,KAAO,WAAbb,aAAaA,EAAAU,aACTE,QAAAA,IAAAA,yBAIJZ,EAAMc,SAAW,SAAUN,GAA3BR,EAAiBe,cAAUP,MAAS,SAAAQ,GAChCjB,GAAAA,EAAagB,QAAAA,QAAcE,CAGnB,IAAMC,EAAYnB,EAAaoB,YAAYH,GAA3C,GAAME,EAAAA,KAAYnB,GAAAA,CACdmB,GAAAA,QAAUE,OAASF,EAAAE,KAAA,GAAApB,EAAAqB,eACfC,EAAAA,SAAeJ,MACflB,CAEA,IADGuB,EAAAD,QAAAE,KAAAN,EAAAE,KAAA,IACHpB,EAAMuB,YAAUD,GAChBtB,EAAMyB,KAAAA,EAAYF,KAAAA,GAClBvB,EAAMgB,SAAOE,EAGjBV,SAEAR,EADGyB,YAAAvB,GACHF,EAAMyB,KAAAA,EACNzB,EAAMgB,SAAOd,EACbF,SAIJA,EADGyB,YAAAvB,GACHF,EAAMyB,KAAAA,EACNzB,EAAMgB,SAAOd,EACbF,KAGL,SAAC0B,GAADC,QAAAC,IAACF,GACAC,EAAAA,YAAYD,GACZ1B,EAAMyB,KAAAA,EACOvB,MAAbF,EAAMgB,QAAOd,EAAAA,KAAAA,SAAAA,EAAAA,KAAAA,QAAAA,QAAAA,wBACTwB,EAAIG,SAAW,EAGf7B,EADGC,SAAA,EAGPO,OAKRR,EAAM8B,QAAU,WACZ/B,EAAagB,cAAcE,MAAM,SAAAD,GAC7B,GAAIA,EAAKe,QAAQC,QAAS,CAEtB,IAAMd,EAAYnB,EAAaoB,YAAYH,GAC3C,GAAIE,EAAUE,KAAK,GACf,GAAIE,QAAQW,OAAOf,EAAUE,KAAMpB,EAAMqB,eACrCrB,EAAMC,SAAU,MACb,CACH,IAAMsB,EAAUD,QAAQE,KAAKN,EAAUE,KAAK,IAC5CpB,EAAMyB,YAAYF,GAClBvB,EAAMgB,KAAOE,EAAUE,KAAK,GAC5BpB,EAAMC,SAAU,OAGpBD,EAAMyB,YAAYvB,GAClBF,EAAMgB,KAAOd,EACbF,EAAMC,SAAU,OAGpBD,EAAMyB,YAAYvB,GAClBF,EAAMgB,KAAOd,EACbF,EAAMC,SAAU,GAErB,SAAAyB,GACCC,QAAQC,IAAIF,GACZ1B,EAAMyB,YAAYvB,GAClBF,EAAMgB,KAAOd,EACM,MAAfwB,EAAIG,QAAkBH,EAAIV,KAAKe,SAAWL,EAAIV,KAAKe,QAAQG,QAAQ,wBACnElC,EAAMC,SAAU,EAEhBD,EAAMC,SAAU,KAK5BD,EAAMyB,YAAc,SAAUT,GAC1BhB,EAAMmC,MAAQnB,GAGlBhB,EAAMqB,YAAc,WAChB,OAAOrB,EAAMmC,OAGjB1C,EAAO2C,IAAI,WAAY,WACnBpC,EAAMa,SAGVb,EAAM8B,UACN9B,EAAMW,QAQVW,QAAQe,OAAO,kBAAmB,IAClCC,WAAW,WA1IX,WACI,IAAMC,EAAMC,KADhBD,EAAAE,MAASC,GACLH,EAAMA,eAAM,EACZA,EAAIE,QAAQ,KA6IhBjD,WAAUmD,YAAWnD,GAHrB8C,WAjJJ,WA0II,cAUA9C,EAAUmD,QAAU,CAAC,SAAU,OAAQ,WAAY,YAAa,KAAM,kBAAmB,gBApJ5F","file":"../../components/home/homeControllers.js","sourcesContent":["/*\n * Copyright (c) 2018, F5 Networks, Inc. All rights reserved.\n * No part of this software may be reproduced or transmitted in any\n * form or by any means, electronic or mechanical, for any purpose,\n * without express written permission of F5 Networks, Inc.\n */\n(function () {\n\n    /**\nHome Controllers - Base Controllers for Home Page\n**/\n    function HomeCtrl () {\n        const app = this;\n        app.stats = {};\n        app.nodeDiscovery = false;\n        app.message = '';\n\n    }\n\n    function GraphCtrl ($scope, $log, $timeout, $interval, $q, uiGridConstants, GraphService) {\n        const graph = this;\n        graph.inLimit = true;\n        graph.updateTimer;\n\n        const tmp = {\n            nodes: [{\n                id: 'BIG IP',\n                group: 50,\n                type: 'bigip',\n                status: 'online'\n            }],\n            links: []\n        };\n        graph.polling = function () {\n            graph.updateTimer = setTimeout(function () {\n                graph.pollData(graph.polling);\n            }, 3000);\n        };\n\n        graph.start = function () {\n            clearTimeout(graph.updateTimer);\n            graph.polling();\n            console.log('graph start - polling');\n        };\n\n        graph.stop = function () {\n            clearTimeout(graph.updateTimer);\n            console.log('graph stop - polling');\n        };\n\n        graph.pollData = function (polling) {\n            GraphService.graphResource.query((data) => {\n                if (data.message.tenants) {\n                    // Process data\n                    const graphData = GraphService.processData(data);\n                    if (graphData.list[0]) {\n                        if (angular.equals(graphData.list[0], graph.latestGraph())) {\n                            graph.inLimit = true;\n                        } else {\n                            const newData = angular.copy(graphData.list[0]);\n                            graph.updateGraph(newData);\n                            graph.data = graphData.list[0];\n                            graph.inLimit = true;\n                        }\n                        polling();\n                    } else {\n                        graph.updateGraph(tmp);\n                        graph.data = tmp;\n                        graph.inLimit = false;\n                        polling();\n                    }\n                } else {\n                    graph.updateGraph(tmp);\n                    graph.data = tmp;\n                    graph.inLimit = true;\n                    polling();\n                }\n            }, (err) => {\n                console.log(err);\n                graph.updateGraph(tmp);\n                graph.data = tmp;\n                if (err.status === 403 && err.data.message && err.data.message.indexOf('Dataset is too large')) {\n                    graph.inLimit = false;\n                } else {\n                    graph.inLimit = true;\n                }\n                polling();\n            });\n        };\n\n\n        graph.getData = function () {\n            GraphService.graphResource.query((data) => {\n                if (data.message.tenants) {\n                    // Process data\n                    const graphData = GraphService.processData(data);\n                    if (graphData.list[0]) {\n                        if (angular.equals(graphData.list, graph.latestGraph())) {\n                            graph.inLimit = true;\n                        } else {\n                            const newData = angular.copy(graphData.list[0]);\n                            graph.updateGraph(newData);\n                            graph.data = graphData.list[0];\n                            graph.inLimit = true;\n                        }\n                    } else {\n                        graph.updateGraph(tmp);\n                        graph.data = tmp;\n                        graph.inLimit = false;\n                    }\n                } else {\n                    graph.updateGraph(tmp);\n                    graph.data = tmp;\n                    graph.inLimit = true;\n                }\n            }, (err) => {\n                console.log(err);\n                graph.updateGraph(tmp);\n                graph.data = tmp;\n                if (err.status === 403 && err.data.message && err.data.message.indexOf('Dataset is too large')) {\n                    graph.inLimit = false;\n                } else {\n                    graph.inLimit = true;\n                }\n            });\n        };\n\n        graph.updateGraph = function (data) {\n            graph.oData = data;\n        };\n\n        graph.latestGraph = function () {\n            return graph.oData;\n        };\n\n        $scope.$on('$destroy', function () {\n            graph.stop();\n        });\n\n        graph.getData();\n        graph.start();\n\n    }\n\n    function HelpCtrl () {\n        const help = this;\n    }\n\n    angular.module('homeControllers', []).\n    controller('HomeCtrl', HomeCtrl).\n    controller('GraphCtrl', GraphCtrl).\n    controller('HelpCtrl', HelpCtrl);\n\n    /** Inject the dependencies - avoid problems during minification **/\n    GraphCtrl.$inject = ['$scope', '$log', '$timeout', '$interval', '$q', 'uiGridConstants', 'GraphService'];\n}());\n"]}